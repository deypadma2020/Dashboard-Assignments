{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP+cRE+duS1aw6eibM101jh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Q1. What is the concept of a metaclass?"],"metadata":{"id":"BQlqI8QVoaeE"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- In object-oriented programming, a metaclass is a class whose instances are classes. Just as an ordinary class defines the behavior of certain objects, a metaclass defines the behavior of certain classes and their instances. Not all object-oriented programming languages support metaclasses.\n","- A metaclass in Python is a class of a class that defines how a class behaves. A class is itself an instance of a metaclass. A class in Python defines how the instance of the class will behave. In order to understand metaclasses well, one needs to have prior experience working with Python classes."],"metadata":{"id":"1r71I1t6oaad"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"xF16nTuJoWiI"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["## Q2. What is the best way to declare a class's metaclass?"],"metadata":{"id":"6EodKlZTqA9T"}},{"cell_type":"markdown","source":["Ans: -\n","\n","When defining a class and no metaclass is defined the default type metaclass will be used. If a metaclass is given and it is not an instance of type() , then it is used directly as the metaclass."],"metadata":{"id":"nbeFm4gRqClf"}},{"cell_type":"code","source":[],"metadata":{"id":"th8nPFWiqG46"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q3. How do class decorators overlap with metaclasses for handling classes?"],"metadata":{"id":"3f7jk_sSqHYF"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Decorators essentially automate the prior example's manual name rebinding here. Just like with metaclasses, because the decorator returns the original class, instances are made from it, not from a wrapper object. In fact, instance creation is not intercepted at all."],"metadata":{"id":"tDPr3JaPqLHo"}},{"cell_type":"code","source":[],"metadata":{"id":"vIc9U8tbqNkV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q4. How do class decorators overlap with metaclasses for handling instances?"],"metadata":{"id":"pSqvyLSMqN91"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Decorators essentially automate the prior example's manual name rebinding here. Just like with metaclasses, because the decorator returns the original class, instances are made from it, not from a wrapper object. In fact, instance creation is not intercepted at all."],"metadata":{"id":"flevnMv7qR6A"}},{"cell_type":"code","source":[],"metadata":{"id":"toH7kBDxqUxe"},"execution_count":null,"outputs":[]}]}