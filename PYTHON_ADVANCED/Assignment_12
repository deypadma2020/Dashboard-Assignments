{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNBi0kM59SHg+Ke7n+tsAo3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Q1. Does assigning a value to a string's indexed character violate Python's string immutability?"],"metadata":{"id":"t6XRrW4islMA"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Assigning a new value to an existing variable is perfectly valid. Python does not have constants. This is independent from data type mutability. You may want to take a look at the id() function."],"metadata":{"id":"u2ZNHBnDslIh"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"_kpgbFJ9seO-"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["## Q2. Does using the += operator to concatenate strings violate Python's string immutability? Why or why not?"],"metadata":{"id":"fgJYJm3XtM_z"}},{"cell_type":"markdown","source":["Ans: -\n","\n","It violates the rules of how ID values and += are supposed to work - the ID values produced with the optimization in place would be not only impossible, but prohibited, with the unoptimized semantics - but the developers care more about people who would see bad concatenation performance and assume Python sucks."],"metadata":{"id":"4K9FXIIVtWuK"}},{"cell_type":"code","source":[],"metadata":{"id":"a1lPT7ihtYyV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q3. In Python, how many different ways are there to index a character?"],"metadata":{"id":"MBz2RWSctesY"}},{"cell_type":"markdown","source":["Ans: -\n","\n","We can access characters in a String in Two ways :\n","- Accessing Characters by Positive Index Number.\n","- Accessing Characters by Negative Index Number."],"metadata":{"id":"3hZ8wS9Ttnem"}},{"cell_type":"code","source":[],"metadata":{"id":"hO3LCnOStqbV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q4. What is the relationship between indexing and slicing?"],"metadata":{"id":"GJJLMpbftrEu"}},{"cell_type":"markdown","source":["Ans: -\n","\n","“Indexing” means referring to an element of an iterable by its position within the iterable. “Slicing” means getting a subset of elements from an iterable based on their indices."],"metadata":{"id":"warn5kEpuFEJ"}},{"cell_type":"code","source":[],"metadata":{"id":"TIXbPRBNuIYq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q5. What is an indexed character's exact data type? What is the data form of a slicing-generated substring?"],"metadata":{"id":"hptemkGLuIxY"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- Note that indexing returns a string — Python has no special type for a single character. It is just a string of length 1.\n","- SUBSTRING is a string manipulation function that manipulates all string data types (BIT, BLOB, and CHARACTER), and extracts characters from a string to create another string."],"metadata":{"id":"4TXHSGuUuRV4"}},{"cell_type":"code","source":[],"metadata":{"id":"pPyQaqP0uWE1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q6. What is the relationship between string and character 'types' in Python?"],"metadata":{"id":"kLnSFn-3uWjg"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Like many other popular programming languages, strings in Python are arrays of bytes representing unicode characters. However, Python does not have a character data type, a single character is simply a string with a length of 1. Square brackets can be used to access elements of the string."],"metadata":{"id":"86KBPmd9ujjF"}},{"cell_type":"code","source":[],"metadata":{"id":"P-BxD9bZungp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q7. Identify at least two operators and one method that allow you to combine one or more smaller strings to create a larger string."],"metadata":{"id":"QhYm00G5uoOU"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Concatenation operators join multiple strings into a single string. There are two concatenation operators, + and & . Both carry out the basic concatenation operation, as the following example shows."],"metadata":{"id":"Bxl2O55lvAQi"}},{"cell_type":"code","source":[],"metadata":{"id":"HRllTmp0vDkS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q8. What is the benefit of first checking the target string with in or not in before using the index method to find a substring?"],"metadata":{"id":"I0lHHKqIvElH"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- Run a loop from start to end and for every index in the given string check whether the sub-string can be formed from that index.\n","- Python String index() Method allows a user to find the index of the first occurrence of an existing substring inside a given string."],"metadata":{"id":"XNtXGNtAvNaE"}},{"cell_type":"code","source":[],"metadata":{"id":"85jwG_DtvQG9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q9. Which operators and built-in string methods produce simple Boolean (true/false) results?"],"metadata":{"id":"XEb0a5-gvQ56"}},{"cell_type":"markdown","source":["Ans: -\n","\n","However, and and or are so useful that all programming languages have both. There are sixteen possible two-input Boolean operators. Except for and and or , they are rarely needed in practice. Because of this, True , False , not , and , and or are the only built-in Python Boolean operators."],"metadata":{"id":"mAXUrgSjvZbY"}},{"cell_type":"code","source":[],"metadata":{"id":"Z1-5Jpd9vbkw"},"execution_count":null,"outputs":[]}]}