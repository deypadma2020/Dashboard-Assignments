{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNajXQcEjgAuDL1IfWMKtl0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Q1. Is an assignment operator like += only for show? Is it possible that it would lead to faster results at the runtime?"],"metadata":{"id":"DATZDRrbAP04"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- The += operator adds the value on its right to the variable or property on its left, and assigns the result to the variable or property on its left.\n","\n","- Improving Runtime Performance\n","1. Choosing Data Types to Improve Performance.\n","2. Creating Classes to Improve Performance.\n","3. Enabling Performance Measurement.\n","4. Minimizing Exception Handling.\n","5. Reducing the Number of Function Calls and Arguments.\n","6. Choosing Input and Output Functions to Improve Performance."],"metadata":{"id":"tUr72P00APxc"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"2X2IIhERAL3n"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["## Q2. What is the smallest number of statements you'd have to write in most programming languages to replace the Python expression a, b = a + b, a?"],"metadata":{"id":"0RF-l9SjAhUw"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"ui3WGUONAtW5"}},{"cell_type":"code","source":[],"metadata":{"id":"Ngh6eIbRAvs-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q3. In Python, what is the most effective way to set a list of 100 integers to 0?"],"metadata":{"id":"jtlshRECAwYg"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Python Create List from 0 to 100. A special situation arises if you want to create a list from 0 to 100 (included). In this case, you simply use the list(range(0, 101)) function call. As stop argument, you use the number 101 because it's excluded from the final series."],"metadata":{"id":"Rc74hyUZA2s_"}},{"cell_type":"code","source":[],"metadata":{"id":"_ng0tDNwA5xq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q4. What is the most effective way to initialise a list of 99 integers that repeats the sequence 1, 2, 3? S If necessary, show step-by-step instructions on how to accomplish this."],"metadata":{"id":"C63mcOXMA6fw"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"Gfxth8eFBKwH"}},{"cell_type":"code","source":[],"metadata":{"id":"Hh12554GBNO7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q5. If you're using IDLE to run a Python application, explain how to print a multidimensional list as efficiently?"],"metadata":{"id":"eu7BnxUtBNxR"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"4XyO3qzTBVeG"}},{"cell_type":"code","source":[],"metadata":{"id":"p1bhmbA_BXTO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q6. Is it possible to use list comprehension with a string? If so, how can you go about doing it?"],"metadata":{"id":"CPztSjXHBX_G"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- List comprehensions offer a succinct way to create lists based on existing lists. When using list comprehensions, lists can be built by leveraging any iterable, including strings and tuples. Syntactically, list comprehensions consist of an iterable containing an expression followed by a for clause.\n","- List comprehension in Python is an easy and compact syntax for creating a list from a string or another list. It is a very concise way to create a new list by performing an operation on each item in the existing list. List comprehension is considerably faster than processing a list using the for loop."],"metadata":{"id":"mgNmgwI_Bdrl"}},{"cell_type":"code","source":[],"metadata":{"id":"Ah89d4leBgBV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q7. From the command line, how do you get support with a user-written Python programme? Is this possible from inside IDLE?"],"metadata":{"id":"kfh_cS4MBghS"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"ba_dVCZlBrCL"}},{"cell_type":"code","source":[],"metadata":{"id":"NJgbaYq4BwRY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q8. Functions are said to be “first-class objects” in Python but not in most other languages, such as C++ or Java. What can you do in Python with a function (callable object) that you can't do in C or C++?"],"metadata":{"id":"e4n74JVeBwrv"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"B1JCR0syB_C9"}},{"cell_type":"code","source":[],"metadata":{"id":"aF7PRu33CAot"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q9. How do you distinguish between a wrapper, a wrapped feature, and a decorator?"],"metadata":{"id":"LFGUFpJZCQFo"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Wrappers around the functions are also knows as decorators which are a very powerful and useful tool in Python since it allows programmers to modify the behavior of function or class. Decorators allow us to wrap another function in order to extend the behavior of the wrapped function, without permanently modifying it."],"metadata":{"id":"4QFI_UAaCTVM"}},{"cell_type":"code","source":[],"metadata":{"id":"sExN1aTNCVv8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q10. If a function is a generator function, what does it return?"],"metadata":{"id":"T5Nr2ZIFCWJ4"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- A generator is a special type of function which does not return a single value, instead, it returns an iterator object with a sequence of values.\n","- In Python, a generator is a function that returns an iterator that produces a sequence of values when iterated over."],"metadata":{"id":"5wDFJ-yFCesX"}},{"cell_type":"code","source":[],"metadata":{"id":"UZKOL7OBCivd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q11. What is the one improvement that must be made to a function in order for it to become a generator function in the Python language?"],"metadata":{"id":"IfOZgNePCjKX"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The generator expression creates a generator object that produces the values of expression for each item in the iterable , one at a time, when iterated over."],"metadata":{"id":"CkEqij6lCogN"}},{"cell_type":"code","source":[],"metadata":{"id":"qufspb7HCqmD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q12. Identify at least one benefit of generators."],"metadata":{"id":"_F6EovqkCrAN"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Generators allow you to create iterators in a very pythonic manner. Iterators allow lazy evaluation, only generating the next element of an iterable object when requested. This is useful for very large data sets. Iterators and generators can only be iterated over once."],"metadata":{"id":"tGxAhph9CzVd"}},{"cell_type":"code","source":[],"metadata":{"id":"fQvXZNXrC2aE"},"execution_count":null,"outputs":[]}]}