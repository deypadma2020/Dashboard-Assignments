{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPTILf8FCjLoElL75jKCNrx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Q1. Define the relationship between a class and its instances. Is it a one-to-one or a one-to-many partnership, for example?"],"metadata":{"id":"Owq9qIRK4Rl5"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- A class is a blueprint which you use to create objects. An object is an instance of a class - it's a concrete 'thing' that you made using a specific class. So, 'object' and 'instance' are the same thing, but the word 'instance' indicates the relationship of an object to its class.\n","- A class is a template for objects. A class defines object properties including a valid range of values, and a default value. A class also describes object behavior. An object is a member or an \"instance\" of a class.\n","- Association relationship can be one to one, One to many, many to one and many to many."],"metadata":{"id":"VvAmv8_G4Rih"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"aDGqCPFe4J84"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["## Q2. What kind of data is held only in an instance?"],"metadata":{"id":"zraXnl2p4e_s"}},{"cell_type":"markdown","source":["Ans: -\n","\n","What is an Instance Variable in Python? If the value of a variable varies from object to object, then such variables are called instance variables. For every object, a separate copy of the instance variable will be created. Instance variables are not shared by objects."],"metadata":{"id":"I4CXlAE34jtk"}},{"cell_type":"code","source":[],"metadata":{"id":"oBmv6uD64lss"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q3. What kind of knowledge is stored in a class?"],"metadata":{"id":"LgWL1L6E4mRQ"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Python class attributes can lead to elegant code—as well as bugs. This guide outlines use cases for attributes, properties, variables, objects, and more."],"metadata":{"id":"Rt4llQIi4mLo"}},{"cell_type":"code","source":[],"metadata":{"id":"QAEKNPv44uiE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q4. What exactly is a method, and how is it different from a regular function?"],"metadata":{"id":"KVy9WJ8c4vIh"}},{"cell_type":"markdown","source":["Ans: -\n","\n","A function doesn't need any object and is independent, while the method is a function, which is linked with any object. We can directly call the function with its name, while the method is called by the object's name. Function is used to pass or return the data, while the method operates the data in a class."],"metadata":{"id":"h5KhBass4zcT"}},{"cell_type":"code","source":[],"metadata":{"id":"-XeFlhRi42qH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q5. Is inheritance supported in Python, and if so, what is the syntax?"],"metadata":{"id":"NZvqUIeu43I2"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Unlike other object-oriented programming languages like Java, Python supports all types of inheritance, even multiple inheritance!"],"metadata":{"id":"tNuvRf4f47eM"}},{"cell_type":"code","source":[],"metadata":{"id":"BaLe0UWW49pB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q6. How much encapsulation (making instance or class variables private) does Python support?"],"metadata":{"id":"47YNl42f4-Lf"}},{"cell_type":"markdown","source":["Ans: -\n","\n","three\n","\n","There are three basic techniques to encapsulate data in Object Programming. Data members, methods, and classes can all be encapsulated."],"metadata":{"id":"PPzQVn985E_H"}},{"cell_type":"code","source":[],"metadata":{"id":"6f78bYy75G0X"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q7. How do you distinguish between a class variable and an instance variable?"],"metadata":{"id":"szH4MXTT5HVt"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- Class variables also known as static variables are declared with the static keyword in a class, but outside a method, constructor or a block. Instance variables are created when an object is created with the use of the keyword 'new' and destroyed when the object is destroyed.\n","- In object-oriented programming, variables at the class level are referred to as class variables, whereas variables at the object level are called instance variables."],"metadata":{"id":"SMwKsfwP5LdI"}},{"cell_type":"code","source":[],"metadata":{"id":"rTAMkSNF5OVT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q8. When, if ever, can self be included in a class's method definitions?"],"metadata":{"id":"CNNJwnm75O5g"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- The self keyword is used to represent an instance (object) of the given class. In this case, the two Cat objects cat1 and cat2 have their own name and age attributes. If there was no self argument, the same class couldn't hold the information for both these objects."],"metadata":{"id":"e54UYKdV5Tyq"}},{"cell_type":"code","source":[],"metadata":{"id":"uSdY0g3Z5ahp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q9. What is the difference between the _ _add_ _ and the _ _radd_ _ methods?"],"metadata":{"id":"M0jMydUT5bJf"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The radd() method adds each value in the DataFrame with a specified value. This method is called reverse add, and is similar to the add() method, but instead of calculating 100 + 15 it calculates 15 + 100 , which in this case will give the same result."],"metadata":{"id":"g4oLI8305kjC"}},{"cell_type":"code","source":[],"metadata":{"id":"KmjOjmWi5oYF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q10. When is it necessary to use a reflection method? When do you not need it, even though you support the operation in question?"],"metadata":{"id":"j8iH9aS15ozS"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- Reflection gives us information about the class to which an object belongs and also the methods of that class that can be executed by using the object. Through reflection, we can invoke methods at runtime irrespective of the access specifier used with them.\n","- "],"metadata":{"id":"9nWvHiaq5zYn"}},{"cell_type":"code","source":[],"metadata":{"id":"UOHRHnP052Q_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q11. What is the _ _iadd_ _ method called?"],"metadata":{"id":"N12-ufK853Gj"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- This function is used to assign and add the current value. This operation does “a+=b” operation.\n","- The Python __iadd__() magic method implements in-place addition x += y that adds together the operands and assigns the result to the left operand. This operation is also called augmented arithmetic assignment. The method simply returns the new value to be assigned to the first operand."],"metadata":{"id":"L2UNSGga57t0"}},{"cell_type":"code","source":[],"metadata":{"id":"NlEXS7Fb5-Ow"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q12. Is the _ _init_ _ method inherited by subclasses? What do you do if you need to customize its behavior within a subclass?"],"metadata":{"id":"SgAnJXuL5-ny"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- No, an inherited class is not required to call the __init__() method of the parent class. If no __init__() method is implemented in the inherited class, then the parent __init__() will be called automatically when an object of the inherited class is created.\n","- Subclassing and Inheritance Classes in Java exist in a hierarchy. A class in Java can be declared as a subclass of another class using the extends keyword."],"metadata":{"id":"qUcqpHbi6DkG"}},{"cell_type":"code","source":[],"metadata":{"id":"BDzmKkgs6GdS"},"execution_count":null,"outputs":[]}]}