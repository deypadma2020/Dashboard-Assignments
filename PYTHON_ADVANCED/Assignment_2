{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNDyg+jV1z3GrG00RWT8dfz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Q1. What is the relationship between classes and modules?"],"metadata":{"id":"XRz2LeZLvzCG"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Modules are collections of methods and constants. They cannot generate instances. Classes may generate instances (objects), and have per-instance state (instance variables).\n","\n","---\n","\n","So a module in python is simply a way to organize the code, and it contains either python classes or just functions. If you need those classes or functions in your project, you just import them. For instance, the math module in python contains just a bunch of functions, and you just call those needed ( math. sin )."],"metadata":{"id":"JNVxNAKxvy44"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"sV7vwqjwvicC"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["## Q2. How do you make instances and classes?"],"metadata":{"id":"z5qsddd4wM0h"}},{"cell_type":"markdown","source":["Ans: -\n","\n","To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts."],"metadata":{"id":"AFwWFKK0xIeh"}},{"cell_type":"code","source":[],"metadata":{"id":"CE5SEEhVxLtw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q3. Where and how should be class attributes created?"],"metadata":{"id":"SjmFW-4XxMYK"}},{"cell_type":"markdown","source":["Ans: -\n","\n","To define a class attribute, you place it outside of the __init__() method. Use class_name. class_attribute or object_name. class_attribute to access the value of the class_attribute .\n","\n","\n","---\n","\n","Class attributes are the variables defined directly in the class that are shared by all objects of the class. Instance attributes are attributes or properties attached to an instance of a class. Instance attributes are defined in the constructor. Defined directly inside a class."],"metadata":{"id":"Cu93tBgpxdWy"}},{"cell_type":"code","source":[],"metadata":{"id":"1PqGEzdOxf_E"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q4. Where and how are instance attributes created?"],"metadata":{"id":"s5iJIEwVxgg6"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Instance attributes are defined in the __init__() function.\n","\n","---\n","\n","Instance attributes are defined in the constructor. Defined directly inside a class. Defined inside a constructor using the self parameter."],"metadata":{"id":"A3LTy-gIxkqg"}},{"cell_type":"code","source":[],"metadata":{"id":"84JXYkSnxm2j"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q5. What does the term &quot;self&quot; in a Python class mean?"],"metadata":{"id":"7AEqLBUixnam"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.\n","\n","---\n","\n","self represents the instance of the class. By using the “self” we can access the attributes and methods of the class in python. It binds the attributes with the given arguments. The reason you need to use self. is because Python does not use the @ syntax to refer to instance attributes."],"metadata":{"id":"tu-EVfCryCGt"}},{"cell_type":"code","source":[],"metadata":{"id":"RJvziqquyI0f"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q6. How does a Python class handle operator overloading?"],"metadata":{"id":"EwZ5TRNZyMq4"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The operator overloading in Python means provide extended meaning beyond their predefined operational meaning. Such as, we use the \"+\" operator for adding two integers as well as joining two strings or merging two lists. We can achieve this as the \"+\" operator is overloaded by the \"int\" class and \"str\" class.\n","\n","---\n","\n","In Python, overloading is achieved by overriding the method which is specifically for that operator, in the user-defined class. For example, __add__(self, x) is a method reserved for overloading + operator, and __eq__(self, x) is for overloading == ."],"metadata":{"id":"Uqm1e140yR2A"}},{"cell_type":"code","source":[],"metadata":{"id":"2PhAS8xqyTkv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q7. When do you consider allowing operator overloading of your classes?"],"metadata":{"id":"qxkeNEU_yT_R"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Operator overloading is mostly useful when you're making a new class that falls into an existing \"Abstract Base Class\" (ABC) -- indeed, many of the ABCs in standard library module collections rely on the presence of certain special methods (and special methods, one with names starting and ending with double underscores ..."],"metadata":{"id":"0un-z6CtyYCo"}},{"cell_type":"code","source":[],"metadata":{"id":"f1CktLB5yaBV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q8. What is the most popular form of operator overloading?"],"metadata":{"id":"xyHqIi7DyaeA"}},{"cell_type":"markdown","source":["Ans: -\n","\n","A very popular and convenient example is the Addition (+) operator. Just think how the '+' operator operates on two numbers and the same operator operates on two strings. It performs “Addition” on numbers whereas it performs “Concatenation” on strings.\n","\n","---\n","\n","Operator Overloading means giving extended meaning beyond their predefined operational meaning. For example operator + is used to add two integers as well as join two strings and merge two lists. It is achievable because '+' operator is overloaded by int class and str class."],"metadata":{"id":"GvsRnXpcygPX"}},{"cell_type":"code","source":[],"metadata":{"id":"cDj-GtNyyiHp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q9. What are the two most important concepts to grasp in order to comprehend Python OOP code?"],"metadata":{"id":"aUntfqElykpb"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Both inheritance and polymorphism are fundamental concepts of object oriented programming. These concepts help us to create code that can be extended and easily maintainable.\n","\n","---\n","\n","The most important concept of Object-Oriented Programming for me is not inheritance, encapsulation, or polymorphism, but the notion of keeping the data and the related code close. The point of this is being able to keep your program structured and traceable. All other properties of OOP are related to this concept.\n","\n","---\n","\n","Now, there are four fundamental concepts of Object-oriented programming – Inheritance, Encapsulation, Polymorphism, and Data abstraction."],"metadata":{"id":"uYv4U8ecyqA4"}},{"cell_type":"code","source":[],"metadata":{"id":"dReiYNOjysAc"},"execution_count":null,"outputs":[]}]}