{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNJkHA/hu40nEu5LvPAskRp"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Q1. Which two operator overloading methods can you use in your classes to support iteration?"],"metadata":{"id":"dQIRbPIR5W42"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The __iter__ returns the iterator object and is implicitly called at the start of loops. The __next__ method returns the next value and is implicitly called at each loop increment. __next__ raises a StopIteration exception when there are no more value to return, which is implicitly captured by looping constructs to stop iterating."],"metadata":{"id":"-1ilg4Ow5Wrr"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r5HBnHCc5Tnx","executionInfo":{"status":"ok","timestamp":1674046175995,"user_tz":-330,"elapsed":92,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"c254206f-743c-4b4b-f4d2-b0950ef5d372"},"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n"]}],"source":["class Counter:\n","    def __init__(self, low, high):\n","        self.current = low\n","        self.high = high\n","    def __iter__(self):\n","        return self\n","    def __next__(self):\n","        if self.current > self.high:\n","            raise StopIteration\n","        else:\n","            self.current += 1\n","            return self.current - 1\n"," \n","for num in Counter(5, 15):\n","    print(num)"]},{"cell_type":"markdown","source":["## Q2. In what contexts do the two operator overloading methods manage printing?"],"metadata":{"id":"ReN_iF495eMh"}},{"cell_type":"markdown","source":["Ans: -\n","\n","You might have wondered how the same built-in operator or function shows different behavior for objects of different classes. This is called operator overloading or function overloading respectively. This article will help you understand this mechanism, so that you can do the same in your own Python classes and make your objects more Pythonic."],"metadata":{"id":"sUGv3Gu65jlG"}},{"cell_type":"code","source":[],"metadata":{"id":"3F3gIKIE5lvB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q3. In a class, how do you intercept slice operations?"],"metadata":{"id":"gE_YSUM05mOD"}},{"cell_type":"markdown","source":["Ans: -\n","\n","slice is a constructor in Python that creates slice object to represent set of indices that the range(start, stop, step) specifies. __getitem__\n","\n","---\n","\n","The slice() function returns a slice object. A slice object is used to specify how to slice a sequence. You can specify where to start the slicing, and where to end. You can also specify the step, which allows you to e.g. slice only every other item."],"metadata":{"id":"HdGRdBOI5p2i"}},{"cell_type":"code","source":[],"metadata":{"id":"NIMp8mAT5uTj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q4. In a class, how do you capture in-place addition?"],"metadata":{"id":"fhoBMa495u87"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Python provides the operator x += y to add two objects in-place by calculating the sum x + y and assigning the result to the first operands variable name x . You can set up the in-place addition behavior for your own class by overriding the magic “dunder” method __iadd__(self, other) in your class definition.\n","\n","---\n","\n"],"metadata":{"id":"sEZn8iWC50I4"}},{"cell_type":"code","source":[],"metadata":{"id":"y9S92hx85yIJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q5. When is it appropriate to use operator overloading?"],"metadata":{"id":"hTyFq9It51-v"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Operator overloading is mostly useful when you're making a new class that falls into an existing \"Abstract Base Class\" (ABC) -- indeed, many of the ABCs in standard library module collections rely on the presence of certain special methods (and special methods, one with names starting and ending with double underscores ...\n","\n","---\n","\n","When one or both operands are of a user-defined class or structure type, operator overloading makes it easier to specify user-defined implementation for such operations. This makes user-defined types more similar to the basic primitive data types in terms of behaviour."],"metadata":{"id":"WX7XBZ5L57GR"}},{"cell_type":"code","source":[],"metadata":{"id":"8Zu-gE5t58t8"},"execution_count":null,"outputs":[]}]}