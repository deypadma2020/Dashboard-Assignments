{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMDUeWyQJcd7mN1HzdJcxHV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Q1. What is the meaning of multiple inheritance?"],"metadata":{"id":"vGly4iDJ9_fi"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Multiple inheritance means that a subclass can inherit from two or more superclasses. C++ allows multiple inheritance, but Java allows only single inheritance, that is, a subclass can inherit only one superclass.\n","\n","---\n","\n","Multiple inheritance is a feature of some object-oriented computer programming languages in which an object or class can inherit features from more than one parent object or parent class. It is distinct from single inheritance, where an object or class may only inherit from one particular object or class.\n","\n","---\n","\n","When a class is derived from more than one base class it is called multiple Inheritance. The derived class inherits all the features of the base case. Syntax: Class Base1: Body of the class Class Base2: Body of the class Class Derived(Base1, Base2): Body of the class.\n","\n","---\n","\n","Multiple inheritance means that a subclass can inherit from two or more superclasses. C++ allows multiple inheritance, but Java allows only single inheritance, that is, a subclass can inherit only one superclass."],"metadata":{"id":"Dav7ld9Q9_cO"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"ix5KjjBo950g"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["## Q2. What is the concept of delegation?"],"metadata":{"id":"TWxHri5E-JhS"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Delegation is commonly defined as the shifting of authority and responsibility for particular functions, tasks or decisions from one person (usually a leader or manager) to another.\n","\n","---\n","\n","Delegation is an object oriented technique (also called a design pattern). Let's say you have an object x and want to change the behaviour of just one of its methods."],"metadata":{"id":"v608pCqf-R2O"}},{"cell_type":"code","source":[],"metadata":{"id":"0e8-_fmY-UBO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q3. What is the concept of composition?"],"metadata":{"id":"jKmtdKFm-UdH"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Composition is a concept that models a has a relationship. It enables creating complex types by combining objects of other types. This means that a class Composite can contain an object of another class Component . This relationship means that a Composite has a Component .\n","\n","---\n","\n","Composition is one of the fundamental concepts in object-oriented programming. It describes a class that references one or more objects of other classes in instance variables. This allows you to model a has-a association between objects. You can find such relationships quite regularly in the real world."],"metadata":{"id":"KNjdJn5y-byU"}},{"cell_type":"code","source":[],"metadata":{"id":"7hh8h9R--eAs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q4. What are bound methodsÂ and how do we use them?"],"metadata":{"id":"6BW0Gv8v-eag"}},{"cell_type":"markdown","source":["Ans: -\n","\n","A bound method is the one which is dependent on the instance of the class as the first argument. It passes the instance as the first argument which is used to access the variables and functions. In Python 3 and newer versions of python, all functions in the class are by default bound methods."],"metadata":{"id":"0au1dRMP-iBK"}},{"cell_type":"code","source":[],"metadata":{"id":"_x2Sq16G-j0x"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q5. What is the purpose of pseudoprivate attributes?"],"metadata":{"id":"yl78kSvR-kYe"}},{"cell_type":"markdown","source":["Ans: -\n","\n","This trick can avoid potential name collisions in the instance, but note that it does not amount to true privacy. If you know the name of the enclosing class, you can still access either of these attributes anywhere you have a reference to the instance by using the fully expanded name (e.g., I. _C1__X = 77)."],"metadata":{"id":"Hss5G0xo-o6c"}},{"cell_type":"code","source":[],"metadata":{"id":"laoyJcw0-q6D"},"execution_count":null,"outputs":[]}]}