{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP/UihaeCR0hlrylItfhG2I"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Q1. What are the two latest user-defined exception constraints in Python 3.X?"],"metadata":{"id":"hsMf3xNDGO-W"}},{"cell_type":"markdown","source":["Ans: -\n","\n","User-Defined Exceptions in Python:\n","\n","Some commonly raised Exceptions are ArithmeticError, AttributeError, ImportError, IOError, FileNotFoundError, etc."],"metadata":{"id":"t-iYy-yOGO6_"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"9x838qQLF2oF"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["## Q2. How are class-based exceptions that have been raised matched to handlers?"],"metadata":{"id":"DqrRAi6eGWUp"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Class-based exceptions can be declared in the interface of procedures. For local procedures, this is done using the addition RAISING of the statements METHODS and FORM. In Class Builder and Function Builder, this done by selecting exception classes when defining exceptions in the interface."],"metadata":{"id":"bBVxM3tsGad5"}},{"cell_type":"code","source":[],"metadata":{"id":"1XwUGGgXGcVn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q3. Describe two methods for attaching context information to exception artefacts."],"metadata":{"id":"bXMdY61sGdCh"}},{"cell_type":"markdown","source":["Ans: -\n","\n","When raising a new exception (rather than using a bare raise to re-raise the exception currently being handled), the implicit exception context can be supplemented with an explicit cause by using from with raise:"],"metadata":{"id":"-eZDTrzfGkop"}},{"cell_type":"code","source":[],"metadata":{"id":"MC_77XeeGo9n"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q4. Describe two methods for specifying the text of an exception object's error message."],"metadata":{"id":"ASGHxaiqGpkL"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The first method to catch and print the exception messages in python is by using except and try statement. If the user enters anything except the integer, we want the program to skip that input and move to the next value. In this way, our program will not crash and will catch and print the exception message."],"metadata":{"id":"Q1kxyVjBGvlT"}},{"cell_type":"code","source":[],"metadata":{"id":"ArOZRPmSGzoC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q5. Why do you no longer use string-based exceptions?"],"metadata":{"id":"6p6l1g4nG0Lj"}},{"cell_type":"markdown","source":["Ans: -\n","\n","This option is a temporary measure - eventually the string-based standard exceptions will be removed from the language altogether. It hasn't been decided ..."],"metadata":{"id":"ebCR8KmYG4FL"}},{"cell_type":"code","source":[],"metadata":{"id":"Dr_8_XNpG5y5"},"execution_count":null,"outputs":[]}]}