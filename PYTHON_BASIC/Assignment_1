{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPa29kKwC34Tw3Bsy0TnrZf"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## 1. In the below elements which of them are values or an expression? eg:- values can be integer or string and expressions will be mathematical operators.\n","\n","  - *\n","  - &#39;hello&#39;\n","  - 87.8\n","  - -\n","  - /\n","  - +\n","  - 6"],"metadata":{"id":"s796EquyKMuI"}},{"cell_type":"markdown","source":["Ans: -\n","1.   '*' -> mathematical operator\n","2.   'hello' -> String value(expression)\n","3.   87.8 -> Float value\n","4.   '-' -> mathematical operator\n","5.   '/' -> mathematical operator\n","6.   '+' -> mathematical operator\n","7.   6 -> Integer value\n","\n"],"metadata":{"id":"uVzpGO34M9jS"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xMaoA0ucIpCv","executionInfo":{"status":"ok","timestamp":1666250663891,"user_tz":-330,"elapsed":967,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"c37f1fc1-a5b2-4877-846b-5845107657e1"},"outputs":[{"output_type":"stream","name":"stdout","text":["1. After multiplying 24 and 27, the value is 648\n","\n","2. The type of 'hello' is <class 'str'>\n","\n","3. The type of 87.7 is <class 'float'>\n","\n","4. After substraction of 24 and 27, the value is -3\n","\n","5. After division of 24 and 27, the value is 0.8888888888888888\n","\n","6. After adding of 24 and 27, the value is 51\n","\n","7. The type of 6 is <class 'int'>\n","\n"]}],"source":["a = 24\n","b = 27\n","s = \"'hello'\"\n","f = 87.7\n","i = 6\n","\n","print(f\"1. After multiplying {a} and {b}, the value is {a * b}\\n\")\n","print(f\"2. The type of {s} is {type(s)}\\n\")\n","print(f\"3. The type of {f} is {type(f)}\\n\")\n","print(f\"4. After substraction of {a} and {b}, the value is {a - b}\\n\")\n","print(f\"5. After division of {a} and {b}, the value is {a / b}\\n\")\n","print(f\"6. After adding of {a} and {b}, the value is {a + b}\\n\")\n","print(f\"7. The type of {i} is {type(i)}\")"]},{"cell_type":"markdown","source":["## 2. What is the difference between string and variable?"],"metadata":{"id":"Gn7Wi31gKdN1"}},{"cell_type":"markdown","source":["Ans: -\n","  \n","Variables are symbols that can use to store data in a program. It is as an empty box that can fill with some data or value. Strings are data, so we can use them to fill up a variable. Declaring strings as variables can make it easier for us to work with strings throughout our Python programs."],"metadata":{"id":"MOeINJ20SQ30"}},{"cell_type":"code","source":["s = \"hello, world\"\n","\n","# Here 's' is a string variable and \"hello, world\" is a string value"],"metadata":{"id":"OODuT2dwKh1u"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 3. Describe three different data types."],"metadata":{"id":"qKPhZvvdKjDs"}},{"cell_type":"markdown","source":["Ans: -\n","\n","|Data Type |\tUsed for |\tExample|\n","|--|--|--|\n","|Integer |\tWhole numbers |\t7, 12, 999|\n","|Float (floating point) |\tNumber with a decimal point\t| 3.15, 9.06, 00.13|\n","|Boolean |\tRepresenting logical values\t| TRUE, FALSE|"],"metadata":{"id":"7dHHDRvFTePv"}},{"cell_type":"code","source":["i = 5\n","print(f\"The datatype of {i} is {type(i)}\\n\")\n","\n","f = 5.7\n","print(f\"The datatype of {f} is {type(f)}\\n\")\n","\n","b = True\n","print(f\"The datatype of {b} is {type(b)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"elQbNR69KnOo","executionInfo":{"status":"ok","timestamp":1666254489933,"user_tz":-330,"elapsed":436,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"99a509c0-c0fa-4362-8e03-79a45bb8314a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The datatype of 5 is <class 'int'>\n","\n","The datatype of 5.7 is <class 'float'>\n","\n","The datatype of True is <class 'bool'>\n"]}]},{"cell_type":"markdown","source":["## 4. What is an expression made up of? What do all expressions do?"],"metadata":{"id":"dUzzwAUmKnuF"}},{"cell_type":"markdown","source":["Ans: -\n","\n","An expression is a combination of operators and operands that is interpreted to produce some other value. In any programming language, an expression is evaluated as per the precedence of its operators.\n","\n","\n","---\n","\n","Expressions are representations of value. They are different from statement in the fact that statements do something while expressions are representation of value. For example any string is also an expressions since it represents the value of the string as well."],"metadata":{"id":"2rJsUhs1gpYZ"}},{"cell_type":"code","source":[],"metadata":{"id":"sTBeyd1_Ksfg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 5. This assignment statements, like spam = 10. What is the difference between an expression and a statement?"],"metadata":{"id":"xbqDPrVOKtEP"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Statements represent an action or command e.g print statements, assignment statements. Expression is a combination of variables, operations and values that yields a result value."],"metadata":{"id":"AEUCGFiyZFvq"}},{"cell_type":"code","source":["# spam is equal to 10 -- it is a statement \n","spam = 10 #it is an expression, here, variable -> spam, operation -> =, value -> 10 "],"metadata":{"id":"HpZPQc6gKxNP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 6. After running the following code, what does the variable bacon contain?\n","  - bacon = 22\n","  - bacon + 1"],"metadata":{"id":"lzKCxZFXKx45"}},{"cell_type":"markdown","source":["Ans: -"],"metadata":{"id":"vh5YWfdAUUEB"}},{"cell_type":"code","source":["bacon = 22 # 22 assigned into the variable 'bacon' \n","bacon + 1\n","\n","print(f\"'bacon' is containing value of {bacon}\")"],"metadata":{"id":"8LNBVNgkK1ko","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666270188452,"user_tz":-330,"elapsed":596,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"b035f547-b2c3-4295-f058-e44e47df8344"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["'bacon' is containing value of 22\n"]}]},{"cell_type":"markdown","source":["## 7. What should the values of the following two terms be?\n","  - &#39;spam&#39; + &#39;spamspam&#39;\n","  - &#39;spam&#39; * 3"],"metadata":{"id":"grM0o6emK2Bs"}},{"cell_type":"code","source":["'spam' + 'spamspam'"],"metadata":{"id":"NJJnHjj5K63w","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1666270370422,"user_tz":-330,"elapsed":811,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"4bab9526-f881-4c49-e5f3-d83492831edc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'spamspamspam'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["'spam' * 3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"XtXBYjtUdBTw","executionInfo":{"status":"ok","timestamp":1666270386719,"user_tz":-330,"elapsed":17,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"2e8a4614-a24e-4577-ce45-967274cf5219"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'spamspamspam'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["## 8. Why is eggs a valid variable name while 100 is invalid?"],"metadata":{"id":"RTKDc1BsK8VF"}},{"cell_type":"markdown","source":["Ans: -"],"metadata":{"id":"KGhIEVGFUbIa"}},{"cell_type":"code","source":["eggs = 2022 # any variable name can contain alphabets"],"metadata":{"id":"ZraX_-cLLDvu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["100 = 2022 # variable name should not starts with number"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":131},"id":"UhSyIPbEdTTv","executionInfo":{"status":"error","timestamp":1666270460098,"user_tz":-330,"elapsed":8,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"e6a0bfdf-3a6f-41a8-f6be-177f7567927f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-8-dd206e60ae32>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    100 = 2022\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m can't assign to literal\n"]}]},{"cell_type":"markdown","source":["## 9. What three functions can be used to get the integer, floating-point number, or string version of a value?"],"metadata":{"id":"NJr30o1dK8Rk"}},{"cell_type":"markdown","source":["Ans: -"],"metadata":{"id":"wVVQsexeUkHt"}},{"cell_type":"code","source":["a = True\n","\n","print(f\"Datatype of 'a' variable is {type(a)}\")\n","\n","print(f\"for getting integer version of a value {int(a)}\")\n","\n","print()\n","\n","b = 10\n","\n","print(f\"Datatype of 'b' variable is {type(b)}\")\n","\n","print(f\"for getting floating point number version of a value {float(b)}\")\n","\n","print()\n","\n","c = 100\n","\n","print(f\"Datatype of 'a' variable is {type(c)}\")\n","\n","print(f\"for getting string version of a value {str(c)}\")"],"metadata":{"id":"L-O-DROLLHyF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666271430302,"user_tz":-330,"elapsed":1441,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"3658e7ec-28ef-4ea3-88ee-1b8e7d119d8d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Datatype of 'a' variable is <class 'bool'>\n","for getting integer version of a value 1\n","\n","Datatype of 'b' variable is <class 'int'>\n","for getting floating point number version of a value 10.0\n","\n","Datatype of 'a' variable is <class 'int'>\n","for getting string version of a value 100\n"]}]},{"cell_type":"markdown","source":["## 10. Why does this expression cause an error? How can you fix it?\n","  - &#39;I have eaten &#39; + 99 + &#39; burritos.&#39;"],"metadata":{"id":"giE84UauLIS-"}},{"cell_type":"markdown","source":["Ans: -"],"metadata":{"id":"DPBOh68mUpbY"}},{"cell_type":"code","source":["# ex = 'I have eaten ' + 99 + ' burritos.' # this will through an error because it is an summation of (string + int + string)\n","# print(type('I have eaten'))\n","# print(type(99))\n","# print(type('burritos'))\n","\n","print()\n","\n","# can fix this problem in this way by converting intiger value of 99 to string value 99\n","ex = 'I have eaten ' + '99' + ' burritos.'\n","print(type('99'))"],"metadata":{"id":"pgryE_mrLNZr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666272444551,"user_tz":-330,"elapsed":1139,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"b9f01c4c-814c-429a-e29d-2402477caf25"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","<class 'str'>\n"]}]},{"cell_type":"code","source":["ex = 'I have eaten ' + 99 + ' burritos.'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":165},"id":"NJAjX2KujP0d","executionInfo":{"status":"error","timestamp":1666272025763,"user_tz":-330,"elapsed":1701,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"14a4fed4-cc69-4705-d2b0-6f74dd1f803d"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-40783b3d9440>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'I have eaten '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m99\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' burritos.'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"int\") to str"]}]},{"cell_type":"code","source":["ex = 'I have eaten ' + '99' + ' burritos.'\n","print(ex)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IZBcSJxAjUXU","executionInfo":{"status":"ok","timestamp":1666272096716,"user_tz":-330,"elapsed":14,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"227963e0-6864-4e9d-8466-757919e3e1d9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["I have eaten 99 burritos.\n"]}]}]}