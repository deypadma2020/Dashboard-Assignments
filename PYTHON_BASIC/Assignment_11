{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN3fFDNPuLSbpgjWsP1Y6nA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## 1. Create an assert statement that throws an AssertionError if the variable spam is a negative integer."],"metadata":{"id":"0mKiOFllAGVG"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The assert statement is used to continue the execute if the given condition evaluates to True. If the assert condition evaluates to False, then it raises the AssertionError exception with the specified error message."],"metadata":{"id":"zoAy4EE1AGCp"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"gs8LgnjX_r-0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1667815116140,"user_tz":-330,"elapsed":33794,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"0a02e5ac-7c33-4993-b9ff-ff3e6449a207"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pyinputplus\n","  Downloading PyInputPlus-0.2.12.tar.gz (20 kB)\n","  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n","Collecting pysimplevalidate>=0.2.7\n","  Downloading PySimpleValidate-0.2.12.tar.gz (22 kB)\n","  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n","Collecting stdiomask>=0.0.3\n","  Downloading stdiomask-0.0.6.tar.gz (3.6 kB)\n","  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n","Building wheels for collected packages: pyinputplus, pysimplevalidate, stdiomask\n","  Building wheel for pyinputplus (PEP 517) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyinputplus: filename=PyInputPlus-0.2.12-py3-none-any.whl size=11315 sha256=563c0f23c5947325476bc9e851c059613a2c8d62938328bf3462c2970cca50dd\n","  Stored in directory: /root/.cache/pip/wheels/e7/33/73/719f8f1bd984d39face880fd22f6c5ef1b85f726e84c687094\n","  Building wheel for pysimplevalidate (PEP 517) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pysimplevalidate: filename=PySimpleValidate-0.2.12-py3-none-any.whl size=16193 sha256=5adf95724995d81f396e177a5554d97b7339a12c42183e6e2b5a03273f95f142\n","  Stored in directory: /root/.cache/pip/wheels/5a/8b/6c/2925d22b93860bdc9b8ce02c3d2cf79336606f7469cef66065\n","  Building wheel for stdiomask (PEP 517) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for stdiomask: filename=stdiomask-0.0.6-py3-none-any.whl size=3321 sha256=c7d62dbd8dc4d1fcb1662dfeb77c2adab5a383fda2b2a74e31083133cef739a8\n","  Stored in directory: /root/.cache/pip/wheels/cf/13/89/64d0d3b167759523f4c1e68f883bbc30e7bfa27050edeb418e\n","Successfully built pyinputplus pysimplevalidate stdiomask\n","Installing collected packages: stdiomask, pysimplevalidate, pyinputplus\n","Successfully installed pyinputplus-0.2.12 pysimplevalidate-0.2.12 stdiomask-0.0.6\n"]}],"source":["!pip install pyinputplus"]},{"cell_type":"code","source":["import pyinputplus as pyip\n","\n","spam = pyip.inputNum(\" Enter a positive number :\")\n","assert spam > 0\n","print(spam,'is a positive number')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"id":"2PUfhmkrhoQZ","executionInfo":{"status":"error","timestamp":1667815142260,"user_tz":-330,"elapsed":26164,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"3c31211d-d47e-4134-cef9-d2ee40e7a92e"},"execution_count":2,"outputs":[{"name":"stdout","output_type":"stream","text":[" Enter a positive number :-24\n"]},{"output_type":"error","ename":"AssertionError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-f0c2750e9055>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mspam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpyip\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minputNum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\" Enter a positive number :\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32massert\u001b[0m \u001b[0mspam\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mspam\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'is a positive number'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAssertionError\u001b[0m: "]}]},{"cell_type":"markdown","source":["## 2. Write an assert statement that triggers an AssertionError if the variables eggs and bacon contain strings that are the same as each other, even if their cases are different (that is, &#39;hello&#39; and &#39;hello&#39; are considered the same, and &#39;goodbye&#39; and &#39;GOODbye&#39; are also considered the same)."],"metadata":{"id":"SGyAou3iAQzu"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"8ykHjeKqASGT"}},{"cell_type":"code","source":["eggs='Hello'\n","bacon ='hello'\n","\n","assert eggs.lower() != bacon.lower() or eggs.upper() != bacon.upper()\n","print('The eggs and bacon variables are not the same!')"],"metadata":{"id":"Y480iev3ATMj","colab":{"base_uri":"https://localhost:8080/","height":218},"executionInfo":{"status":"error","timestamp":1667815150344,"user_tz":-330,"elapsed":8,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"f8821d46-63d6-43eb-a06c-f748d33f2da7"},"execution_count":3,"outputs":[{"output_type":"error","ename":"AssertionError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-ff14aa322207>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mbacon\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;34m'hello'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32massert\u001b[0m \u001b[0meggs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mbacon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0meggs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mbacon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'The eggs and bacon variables are not the same!'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAssertionError\u001b[0m: "]}]},{"cell_type":"markdown","source":["## 3. Create an assert statement that throws an AssertionError every time."],"metadata":{"id":"_M45r5nSAUFw"}},{"cell_type":"markdown","source":["Ans: -\n","\n","assert False - this always triggers an exception"],"metadata":{"id":"3N2k18XtAWNZ"}},{"cell_type":"code","source":["assert False"],"metadata":{"id":"ZlHatNQcAXGu","colab":{"base_uri":"https://localhost:8080/","height":165},"executionInfo":{"status":"error","timestamp":1667815229175,"user_tz":-330,"elapsed":622,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"9e5c5018-4f53-42d5-ebef-ef35dc98fd83"},"execution_count":4,"outputs":[{"output_type":"error","ename":"AssertionError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-a871fdc9ebee>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32massert\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAssertionError\u001b[0m: "]}]},{"cell_type":"markdown","source":["## 4. What are the two lines that must be present in your software in order to call logging.debug()?"],"metadata":{"id":"9dUmiSc_AX2W"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"rfHE0aBhAaz0"}},{"cell_type":"code","source":["import logging as lg\n","lg.basicConfig(level=lg.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s')"],"metadata":{"id":"ZoQWFAorAb0A","executionInfo":{"status":"ok","timestamp":1667815246734,"user_tz":-330,"elapsed":8,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["## 5. What are the two lines that your program must have in order to have logging.debug() send a logging message to a file named programLog.txt?"],"metadata":{"id":"v-Y-aIWGAcSz"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"ympDpWv4AeIU"}},{"cell_type":"code","source":["import logging as lg\n","lg.basicConfig(filename='programLog.txt', level=lg.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s')"],"metadata":{"id":"-UcGiKoMAg75","executionInfo":{"status":"ok","timestamp":1667815273264,"user_tz":-330,"elapsed":3,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["## 6. What are the five levels of logging?"],"metadata":{"id":"lcBaNFTXAhdt"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Log messages can have 5 levels - DEBUG, INGO, WARNING, ERROR and CRITICAL. They can also include traceback information for exceptions.\n","- logging.debug() - variable's state and small details\n","- logging.info() - general events, confirm a program is working\n","- logging.warning() - potiental problem to work on in the future\n","- logging.error() - record an error that caused program to fail to do something\n","- logging.critical() - fatal error that has caused"],"metadata":{"id":"IBPzauKjAi13"}},{"cell_type":"code","source":[],"metadata":{"id":"q7f53GEAAkUx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 7. What line of code would you add to your software to disable all logging messages?"],"metadata":{"id":"qi98TfEvAk0A"}},{"cell_type":"markdown","source":["Ans: -\n","\n","getLogger('my-logger') logger. propagate = False # now if you use logger it will not log to console. This will prevent logging from being send to the upper logger that includes the console logging."],"metadata":{"id":"KhhNroGAAnGv"}},{"cell_type":"code","source":["import logging as lg\n","lg.disable(lg.CRITICAL)"],"metadata":{"id":"9myz5gOaAoOt","executionInfo":{"status":"ok","timestamp":1667815392154,"user_tz":-330,"elapsed":5,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["## 8. Why is using logging messages better than using print() to display the same message?"],"metadata":{"id":"tg-7SgX2ApIW"}},{"cell_type":"markdown","source":["Ans: -\n","\n","One of the advantages of using the logging module to track our codes is the ability to format the messages based on our needs. For example, in my code, I would like to log the date and time with appropriate messages.\n","\n","- You can disable logging messages without removing the logging function calls.\n","- You can selectively disable lower-level logging messages.\n","- You can create logging messages. Logging messages provides a timestamp."],"metadata":{"id":"pJsRwz2JAqRQ"}},{"cell_type":"code","source":[],"metadata":{"id":"3KPxnQXlArSE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 9. What are the differences between the Step Over, Step In, and Step Out buttons in the debugger?"],"metadata":{"id":"bW8qlhedAr49"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Step Into: Step Into is used for debugging the test steps line by line. When the procedure gets called, Step Into enables you to get inside the procedure and debugs the procedure steps line by line. Step Over: Step Over will enable, only after the debugging is started with Step Into / Run From Step / Run to Step.\n","- The Step in button will move the debugger into a function call.\n","- The Over button will quickly execute the function call without stepping into it.\n","- The Out button will quickly execute the rest of the code until it steps out of the function it currently is in."],"metadata":{"id":"ykF3cR5IAtN7"}},{"cell_type":"code","source":[],"metadata":{"id":"9YRc8ZgRAukV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 10. After you click Continue, when will the debugger stop ?"],"metadata":{"id":"GWfMZeStAvCo"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Continue execution, only stop when a breakpoint is encountered. Set the next line that will be executed. Only available in the bottom-most frame. This lets you jump back and execute code again, or jump forward to skip code that you don't want to run."],"metadata":{"id":"s_gst54IAwMw"}},{"cell_type":"code","source":[],"metadata":{"id":"KedZketJAxA-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 11. What is the concept of a breakpoint?"],"metadata":{"id":"rzuXVWPiA1us"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Python breakpoint() - Stop Debugging\n","\n","A breakpoint is an intentional stopping point or pause put into a program for debugging purposes.\n","\n","\n","Python sys. breakpointhook() function uses environment variable PYTHONBREAKPOINT to configure the debugger. If unset, the default PDB debugger is used. If it's set to “0” then the function returns immediately and no code debugging is performed."],"metadata":{"id":"ZUPEJQgtA28H"}},{"cell_type":"code","source":[],"metadata":{"id":"YnRgastSA35k"},"execution_count":null,"outputs":[]}]}