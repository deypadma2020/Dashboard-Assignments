{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMA49Iy2gAtMBFr4VNiIObu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## 1. Create a zoo.py file first. Define the hours() function, which prints the string &#39;Open 9-5 daily&#39;. Then, use the interactive interpreter to import the zoo module and call its hours() function."],"metadata":{"id":"VUE5Vl6CLFrU"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"RfTs1sdWLFfF"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"Sio9r90dQqYm","colab":{"base_uri":"https://localhost:8080/","height":73},"executionInfo":{"status":"ok","timestamp":1673775875198,"user_tz":-330,"elapsed":17497,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"68b7ae2d-bf1e-44a4-e7c2-80e4a99f61fb"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-15c3bb8e-8b37-4ae7-8fca-808028261d46\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-15c3bb8e-8b37-4ae7-8fca-808028261d46\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving zoo.py to zoo.py\n"]}],"source":["from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","source":["!pip install zoo"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mMxQE0bbGS-w","executionInfo":{"status":"ok","timestamp":1673775890803,"user_tz":-330,"elapsed":8017,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"b092a3d1-579d-4b4f-cd0c-f258a30274e7"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting zoo\n","  Downloading zoo-0.1a0.tar.gz (803 bytes)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Building wheels for collected packages: zoo\n","  Building wheel for zoo (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for zoo: filename=zoo-0.1a0-py3-none-any.whl size=1234 sha256=1f4bd8db6b9630afe1f1375306ae7696faefcd3a1d496c1d57f047e12690ebac\n","  Stored in directory: /root/.cache/pip/wheels/c0/f2/0f/143659a16ac5c2c5a801d30f355d39e696a107188d6531c4e0\n","Successfully built zoo\n","Installing collected packages: zoo\n","Successfully installed zoo-0.1a0\n"]}]},{"cell_type":"code","source":["import zoo\n","from importlib import reload\n","reload(zoo)\n","\n","zoo.hours()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"hAhZ4A29Ffkw","executionInfo":{"status":"ok","timestamp":1673775897513,"user_tz":-330,"elapsed":10,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"4ecea9eb-f851-4a37-f089-f7d3225e25bc"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Open 9-5 daily'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["## 2. In the interactive interpreter, import the zoo module as menagerie and call its hours() function."],"metadata":{"id":"Y_w8RqidLOSA"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"ErVchsoOLS9B"}},{"cell_type":"code","source":["import zoo as menagerie\n","menagerie.hours()"],"metadata":{"id":"N2hKN9_dLTVJ","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1673775924709,"user_tz":-330,"elapsed":842,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"6bf16f67-d654-4df0-c63b-78090fc5d621"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Open 9-5 daily'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["## 3. Using the interpreter, explicitly import and call the hours() function from zoo."],"metadata":{"id":"FW7tZr12LUU6"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"hKez5ogGLZ2M"}},{"cell_type":"code","source":["from zoo import hours\n","hours()"],"metadata":{"id":"HmFZlMY5Lab7","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1673775939431,"user_tz":-330,"elapsed":716,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"82820d73-4084-4e84-f320-744eb0757c07"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Open 9-5 daily'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["## 4. Import the hours() function as info and call it."],"metadata":{"id":"cce9-5CXLa5C"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"EmTOozeqLhtI"}},{"cell_type":"code","source":["from zoo import hours as info\n","info()"],"metadata":{"id":"4Q5llfEaLiR5","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1673775951311,"user_tz":-330,"elapsed":574,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"71952a4f-208b-4c0f-c004-bdd68d4fa04d"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Open 9-5 daily'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["## 5. Create a plain dictionary with the key-value pairs &#39;a&#39;: 1, &#39;b&#39;: 2, and &#39;c&#39;: 3, and print it out."],"metadata":{"id":"YAVWNPftLjQo"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"RV53WyVTLpKH"}},{"cell_type":"code","source":["plain = {'a': 1, 'b': 2, 'c': 3}\n","plain"],"metadata":{"id":"R1jqz3xZLpcp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1673775965105,"user_tz":-330,"elapsed":607,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"1639acf8-bd9b-4637-a494-d788c2f7e8bf"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'a': 1, 'b': 2, 'c': 3}"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["## 6.Make an OrderedDict called fancy from the same pairs listed in 5 and print it. Did it print in the same order as plain?"],"metadata":{"id":"bBQr7i7OLp8Q"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"5XsD43G1L1NL"}},{"cell_type":"code","source":["#Yes\n","from collections import OrderedDict\n","fancy = OrderedDict([('a', 1), ('b', 2), ('c', 3)])\n","fancy"],"metadata":{"id":"MaMBW-6RL101","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1673775972707,"user_tz":-330,"elapsed":5,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"e5bb8e58-5fa8-499e-b58f-5c774c212582"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["OrderedDict([('a', 1), ('b', 2), ('c', 3)])"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["## 7. Make a default dictionary called dict_of_lists and pass it the argument list. Make the list dict_of_lists[&#39;a&#39;] and append the value &#39;something for a&#39; to it in one assignment. Print dict_of_lists[&#39;a&#39;]."],"metadata":{"id":"w0adHtISL2Wx"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"ir4M7hcIMDxn"}},{"cell_type":"code","source":["from collections import defaultdict\n","dict_of_lists = defaultdict(list)\n","dict_of_lists['a'].append('something for a')\n","dict_of_lists['a']"],"metadata":{"id":"UF5OcsgsMFa9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1673775982567,"user_tz":-330,"elapsed":645,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"8fd04d54-5d10-4ae2-83dc-c00e69c9303e"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['something for a']"]},"metadata":{},"execution_count":9}]}]}