{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP3vskw55GuKhVmWfET5AaZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## 1.What are the two values of the Boolean data type? How do you write them?"],"metadata":{"id":"soCwA1DsmlN8"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The two values of the Boolean data type are - \n","\n","(1) True\n","\n","(2) False"],"metadata":{"id":"133eZn0A0u1I"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"qG-UEjVlmgOy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666359128072,"user_tz":-330,"elapsed":30,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"58a4a533-b297-40c5-c0a2-403ddf3b6404"},"outputs":[{"output_type":"stream","name":"stdout","text":["The datatype of 't' is <class 'bool'>\n","\n","The datatype of 'f' is <class 'bool'>\n","\n"]}],"source":["t = True\n","print(f\"The datatype of 't' is {type(t)}\\n\")\n","\n","f = False\n","print(f\"The datatype of 'f' is {type(f)}\\n\")"]},{"cell_type":"markdown","source":["## 2. What are the three different types of Boolean operators?"],"metadata":{"id":"k7s2o3Tcmu8o"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The three different types of Boolean operators are - \n","\n","(1) OR\n","\n","(2) AND\n","\n","(3) NOT"],"metadata":{"id":"W_BiHSKQ2Psh"}},{"cell_type":"code","source":["intro = \"I am Padma Dey. I am belongs to a Gandhabanik community in West Bengal, India.\"\n","\n","list_1 = intro.split()\n","\n","print(list_1, end = \"\")\n","\n","print()\n","\n","# checking for \"or\"\n","if 'Myself' in list_1 or 'Padma' in list_1:\n","  print(\"\\nThis is a true case\")\n","else:\n","  print(\"\\nThis is a false case\")\n","\n","print()\n","\n","# checking for \"and\"\n","if 'West Bengal' in list_1 and 'India.' in list_1:\n","  print(\"This is a true case\")\n","else:\n","  print(\"This is a false case\")\n","\n","print()\n","\n","# checking for \"not\"\n","if 'Riya' not in list_1 :\n","  print(\"This is a true case\")\n","else:\n","  print(\"This is a false case\")"],"metadata":{"id":"lzUTeU1imw8W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666359128073,"user_tz":-330,"elapsed":28,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"83a8bb99-0994-4f8b-ed2f-961ca48239ab"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['I', 'am', 'Padma', 'Dey.', 'I', 'am', 'belongs', 'to', 'a', 'Gandhabanik', 'community', 'in', 'West', 'Bengal,', 'India.']\n","\n","This is a true case\n","\n","This is a false case\n","\n","This is a true case\n"]}]},{"cell_type":"markdown","source":["## 3. Make a list of each Boolean operator&#39;s truth tables (i.e. every possible combination of Boolean values for the operator and what it evaluate )."],"metadata":{"id":"5_d1RWd4mxZ4"}},{"cell_type":"markdown","source":["Ans: -\n","\n","| cond 1 (x) | cond 2 (y) | not x | x and y | x or y |\n","|--|--|--|--|--|\n","| false |\tfalse | true | false | false |\n","| false |\ttrue |\ttrue |\tfalse |\ttrue |\n","| true | false |\tfalse | false | true |\n","| true | true | false |\ttrue | true |\n"],"metadata":{"id":"lBslIhNjD5Ak"}},{"cell_type":"code","source":[],"metadata":{"id":"iBtYAdPwm2oQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 4. What are the values of the following expressions?\n","\n","\n","  - (5 &gt; 4) and (3 == 5)\n","  - not (5 &gt; 4)\n","  - (5 &gt; 4) or (3 == 5)\n","  - not ((5 &gt; 4) or (3 == 5))\n","  - (True and True) and (True == False)\n","  - (not False) or (not True)"],"metadata":{"id":"6r3Bitqmm3Rw"}},{"cell_type":"markdown","source":["Ans: -"],"metadata":{"id":"SeJRsM25VjnV"}},{"cell_type":"code","source":["print(f\"The value of '(5 > 4) and (3 == 5)' is {(5 > 4) and (3 == 5)}\")\n","print(f\"The value of 'not (5 > 4)' is {not (5 > 4)}\")\n","print(f\"The value of '(5 > 4) or (3 == 5)' is {(5 > 4) or (3 == 5)}\")\n","print(f\"The value of 'not ((5 > 4) or (3 == 5))' is {not ((5 > 4) or (3 == 5))}\")\n","print(f\"The value of '(True and True) and (True == False)' is {(True and True) and (True == False)}\")\n","print(f\"The value of '(not False) or (not True)' is {(not False) or (not True)}\")"],"metadata":{"id":"IeOj7KkinTMf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666359128073,"user_tz":-330,"elapsed":21,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"a5dfa30a-75c1-4434-f295-ec4156528689"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The value of '(5 > 4) and (3 == 5)' is False\n","The value of 'not (5 > 4)' is False\n","The value of '(5 > 4) or (3 == 5)' is True\n","The value of 'not ((5 > 4) or (3 == 5))' is False\n","The value of '(True and True) and (True == False)' is False\n","The value of '(not False) or (not True)' is True\n"]}]},{"cell_type":"markdown","source":["## 5. What are the six comparison operators?"],"metadata":{"id":"YGTG0PeYnT1J"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The six different types of Comparison Operators in Python: \n","\n","(1) less than, \n","\n","(2) greater than, \n","\n","(3) less than or equal to, \n","\n","(4) greater than or equal to, \n","\n","(5) equal to, and \n","\n","(6) not equal to"],"metadata":{"id":"7rFXgZQRKYlB"}},{"cell_type":"code","source":["a = 102\n","b = 902\n","c = 5006\n","d = 102\n","\n","if a < b:\n","  print(\"B is greater\")\n","else:\n","  print(\"A is greater\")\n","\n","print()\n","\n","if a > b:\n","  print(\"B is lessr\")\n","else:\n","  print(\"A is lesser\")\n","\n","print()\n","\n","if a == d:\n","  print(\"A & D is equal\")\n","else:\n","  print(\"A & D is not equal\")\n","  \n","print()\n","\n","if a != d:\n","  print(\"A & D is not equal\")\n","else:\n","  print(\"A & D is equal\")\n","\n","\n","print()\n","\n","if a >= c:\n","  print(\"A is greater or equal to C\")\n","else:\n","  print(\"A is not greater or equal to C\")\n","\n","print()\n","\n","if a <= c:\n","  print(\"A is lesser or equal to C\")\n","else:\n","  print(\"A is not lesser or equal to C\")"],"metadata":{"id":"rf1goNWSnYFF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666359128074,"user_tz":-330,"elapsed":17,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"58817312-0d8b-4047-8784-04cb99296c86"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["B is greater\n","\n","A is lesser\n","\n","A & D is equal\n","\n","A & D is equal\n","\n","A is not greater or equal to C\n","\n","A is lesser or equal to C\n"]}]},{"cell_type":"markdown","source":["## 6. How do you tell the difference between the equal to and assignment operators?Describe a condition and when you would use one."],"metadata":{"id":"KP20P7lUnY9D"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- assignment operator works for assigning value into variable.\n","\n","- Another side, equal to operator works for checking (compairing) condition, whether two or more values are equal."],"metadata":{"id":"NuFxbcCzuyeI"}},{"cell_type":"code","source":["a = 80 # here, '=' works for 'a' as an assignment operator\n","\n","p = r = 24\n","\n","print(p)\n","print(r)\n","\n","if p == r: # here, '==' works for 'p' and 'r' as an equal to operator\n","  print(\"P & R is equal\")\n","else:\n","  print(\"P & R is not equal\")\n","\n"],"metadata":{"id":"fp_TCgAQnd44","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666359128074,"user_tz":-330,"elapsed":13,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"007fff50-51db-4349-b80d-60eb050de423"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["24\n","24\n","P & R is equal\n"]}]},{"cell_type":"markdown","source":["## 7. Identify the three blocks in this code:\n","\n","  - spam = 0\n","  - if spam == 10:\n","  - print(&#39;eggs&#39;)\n","  - if spam &gt; 5:\n","  - print(&#39;bacon&#39;)\n","  - else:\n","  - print(&#39;ham&#39;)\n","  - print(&#39;spam&#39;)\n","  - print(&#39;spam&#39;)"],"metadata":{"id":"GYwsWtfbnejJ"}},{"cell_type":"markdown","source":["Ans: -"],"metadata":{"id":"ibZFHbGDVuhg"}},{"cell_type":"code","source":["spam = 0\n","\n","# 1st block\n","if spam == 10:\n","  print('eggs')\n","\n","# 2nd block\n","if spam > 5:\n","  print('bacon')\n","\n","# 3rd block\n","else:\n","  print('ham')\n","  print('spam')\n","  # print('spam')\n"],"metadata":{"id":"gvu_4K2An4cd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666359128074,"user_tz":-330,"elapsed":11,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"938387cb-d240-4e17-82dd-26d8eb70ec56"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ham\n","spam\n"]}]},{"cell_type":"markdown","source":["## 8. Write code that prints Hello if 1 is stored in spam, prints Howdy if 2 is stored in spam, and prints Greetings! if anything else is stored in spam."],"metadata":{"id":"FdQNxuuCn44h"}},{"cell_type":"markdown","source":["Ans: -"],"metadata":{"id":"uKVRuMLbVy58"}},{"cell_type":"code","source":["spam = int(input(\"Enter a numeric value: \"))\n","\n","if spam == 1:\n","  print(\"Hello\")\n","\n","elif spam == 2:\n","  print(\"Howdy\")\n","\n","else:\n","  print(\"Greetings!\")"],"metadata":{"id":"AUfeNEfyoZVL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666359137261,"user_tz":-330,"elapsed":9196,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"fe076b43-1ad8-4162-8e30-b0ecc93cb95e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a numeric value: 6\n","Greetings!\n"]}]},{"cell_type":"markdown","source":["## 9.If your programme is stuck in an endless loop, what keys you’ll press?"],"metadata":{"id":"4lG7xtwOoZvq"}},{"cell_type":"markdown","source":["Ans: -\n","\n","An infinite loop is a loop that runs indefinitely and it only stops with external intervention or when a break statement is found. You can stop an infinite loop with CTRL + C ."],"metadata":{"id":"0HDvfv790BAi"}},{"cell_type":"code","source":[],"metadata":{"id":"3CFNL2lYobkR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 10. How can you tell the difference between break and continue?"],"metadata":{"id":"fPp0dDQRob-K"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- The main difference between both the statements is that when break keyword comes, it terminates the execution of the current loop and passes the control over the next loop or main body, whereas when continue keyword is encountered, it skips the current iteration and executes the very next iteration in the loop. \n","- In simple words break statement leaves a loop, whereas the continue statement jumps to the next iteration."],"metadata":{"id":"wF83UiJjc6aP"}},{"cell_type":"code","source":["# use of break\n","print(\"condition is true, then break the running loop\")\n","for i in range(10):\n","    if(i==6):\n","      break\n","    print(i, end = \" \")\n","\n","print()\n","    \n","print(\"condition is true, then skips those element\")\n","#use of  continue\n","for i in range(10):\n","    if (i == 5) :\n","      continue\n","    print(i, end = \" \")"],"metadata":{"id":"0vopWJTOohMN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666359137262,"user_tz":-330,"elapsed":10,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"a68f53cd-102e-47a7-ee40-e9518a74c3ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["condition is true, then break the running loop\n","0 1 2 3 4 5 \n","condition is true, then skips those element\n","0 1 2 3 4 6 7 8 9 "]}]},{"cell_type":"markdown","source":["## 11. In a for loop, what is the difference between range(10), range(0, 10), and range(0, 10, 1)?"],"metadata":{"id":"GO3eiQnTohqi"}},{"cell_type":"markdown","source":["Ans: -"],"metadata":{"id":"yqOJrpazV7K2"}},{"cell_type":"code","source":["# # given list of numbers\n","# arr = [1, 2, 3, 4, 5, 6]\n","\n","print(\"Iteration in range(10) -\")\n","for i in range(10): #here, mentioned only the stop value of the range, and start value '0' & step value '1' taken by default\n","  print(i, end = \" \")\n","\n","print()\n","\n","print(\"Iteration in range(0,10) -\")\n","for i in range(0,10): #here, mentioned the start value and, stop value of the range & step value '1' taken by default\n","  print(i, end = \" \")\n","\n","print()\n","\n","print(\"Iteration in range(0,10,1) -\")\n","for i in range(0,10,1): #here, mentioned the start value and, stop value of the range & step value\n","  print(i, end = \" \")"],"metadata":{"id":"BPQF99NFolwi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666359138170,"user_tz":-330,"elapsed":915,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"ff7b50b5-3abe-4d1c-a548-47d0ffa0ff82"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Iteration in range(10) -\n","0 1 2 3 4 5 6 7 8 9 \n","Iteration in range(0,10) -\n","0 1 2 3 4 5 6 7 8 9 \n","Iteration in range(0,10,1) -\n","0 1 2 3 4 5 6 7 8 9 "]}]},{"cell_type":"markdown","source":["## 12. Write a short program that prints the numbers 1 to 10 using a for loop. Then write an equivalent program that prints the numbers 1 to 10 using a while loop."],"metadata":{"id":"kFTzSUY_omR0"}},{"cell_type":"markdown","source":["Ans: -"],"metadata":{"id":"qDO2U05JWBDe"}},{"cell_type":"code","source":["# prints the numbers 1 to 10 using a for loop\n","print(\"Iteration in range(1,11) using for loop -\")\n","for i in range(1,11):\n","  print(i, end = \" \")\n","\n","print()\n","\n","# prints the numbers 1 to 10 using a while loop\n","print(\"Iteration in range(1,10) using for loop -\")\n","i = 1\n","while i <= 10 :\n","  print(i, end = \" \")\n","  i = i + 1"],"metadata":{"id":"mZnDK-7ZoqwM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666359138171,"user_tz":-330,"elapsed":7,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"9fddcbf3-f32e-4861-dc38-ce762e6c788c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Iteration in range(1,11) using for loop -\n","1 2 3 4 5 6 7 8 9 10 \n","Iteration in range(1,10) using for loop -\n","1 2 3 4 5 6 7 8 9 10 "]}]},{"cell_type":"markdown","source":["## 13. If you had a function named bacon() inside a module named spam, how would you call it after importing spam?"],"metadata":{"id":"7AdJJOdmorTy"}},{"cell_type":"markdown","source":["Ans: -\n","\n","This function can be called with spam.bacon()."],"metadata":{"id":"V56_MyGFu-k7"}},{"cell_type":"code","source":[],"metadata":{"id":"MBhWdnCJowOa"},"execution_count":null,"outputs":[]}]}