{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOimWUGM+wYMJCR2/KFnhpT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## 1. What is the result of the code, and why?\n","```\n",">>> def func(a, b=6, c=8):\n","      print(a, b, c)\n","```\n","```\n",">>> func(1, 2)\n","```"],"metadata":{"id":"MigG4VkGmTfc"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The line func() takes two values, that is 1 and 2 respectively, but the func() is defined to take 3 values, as in func() we pass only two values, the third value comes from the default value, that is c = 8."],"metadata":{"id":"YHocZ50QmTb5"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"dvsPBkQKmM14"},"outputs":[],"source":["def func(a, b=6, c=8):\n","  print(a, b, c)"]},{"cell_type":"code","source":["func(1, 2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7J28R_R6rDZ-","executionInfo":{"status":"ok","timestamp":1673790271029,"user_tz":-330,"elapsed":7,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"311fbb1b-ee39-49c0-98c0-b3b1ee19623a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 8\n"]}]},{"cell_type":"markdown","source":["## 2. What is the result of this code, and why?\n","```\n",">>> def func(a, b, c=5):\n","      print(a, b, c)\n","```\n","```\n",">>> func(1, c=3, b=2)\n","```"],"metadata":{"id":"A6xJL5CCmngM"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The line func() takes three values, that is 1 , c= 3 snd b = 2 respectively,the func() is defined to take 3 values, as in func() we pass othree values, the default values gets overwritten, and we get the newly passed values."],"metadata":{"id":"xuTXvcITmuMs"}},{"cell_type":"code","source":["def func(a, b, c=5):\n","  print(a, b, c)"],"metadata":{"id":"3fP0kHAomwV4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["func(1, c=3, b=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"opN7t5LbrMPz","executionInfo":{"status":"ok","timestamp":1673790288157,"user_tz":-330,"elapsed":8,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"cf8c6e94-ac56-414e-dc25-b549d2b047d7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 3\n"]}]},{"cell_type":"markdown","source":["## 3. How about this code: what is its result, and why?\n","```\n",">>> def func(a, *pargs):\n","      print(a, pargs)\n","```\n","```\n",">>> func(1, 2, 3)\n","```"],"metadata":{"id":"t-a0gdHxmwxL"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The special syntax pargs in function definitions in python is used to pass a variable number of arguments to a function. It is used to pass a non-key worded, variable-length argument list. The syntax is to use the symbol to take in a variable number of arguments; by convention, it is often used with the word args.\n","\n","What pargs allows you to do is take in more arguments than the number of formal arguments that you previously defined. With pargs, any number of extra arguments can be tacked on to your current formal parameters (including zero extra arguments)."],"metadata":{"id":"rUoAf2l-m4cq"}},{"cell_type":"code","source":["def func(a, *pargs):\n","  print(a, pargs)"],"metadata":{"id":"4SnKsSH0m94a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["func(1, 2, 3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A-rTcqYerU3B","executionInfo":{"status":"ok","timestamp":1673790318303,"user_tz":-330,"elapsed":13,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"1dd03f90-b55f-4818-be28-4f6d0b4659ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 (2, 3)\n"]}]},{"cell_type":"markdown","source":["## 4. What does this code print, and why?\n","```\n",">>> def func(a, **kargs):\n","      print(a, kargs)\n","```\n","```\n",">>> func(a=1, c=3, b=2)\n","```"],"metadata":{"id":"LMI5ZdIvojpx"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The special syntax **kargs in function definitions in python is used to pass a keyworded, variable-length argument list. We use the name kwargs with the double star. The reason is because the double star allows us to pass through keyword arguments (and any number of them)."],"metadata":{"id":"4QSjv30momqU"}},{"cell_type":"code","source":["def func(a, **kargs):\n","  print(a, kargs)"],"metadata":{"id":"0-5kMueFophS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["func(a=1, c=3, b=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3vF39tGTrfBN","executionInfo":{"status":"ok","timestamp":1673790359387,"user_tz":-330,"elapsed":7,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"9d69fd34-e1ff-4b97-ac78-5069f4228432"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 {'c': 3, 'b': 2}\n"]}]},{"cell_type":"markdown","source":["## 5. What gets printed by this, and explain?\n","```\n",">>> def func(a, b, c=8, d=5):\n","      print(a, b, c, d)\n","```\n","```\n",">>> func(1, *(5, 6))\n","```"],"metadata":{"id":"2rHGIvPuozM4"}},{"cell_type":"markdown","source":["Ans: -\n","\n","' * ' is the unpacking operator and are operators that unpack the values from iterable objects in Python. The single asterisk operator * can be used on any iterable that Python provides, while the double asterisk operator ** can only be used on dictionaries. In the example the value *(5,6) will be unpacked and will be assigned to b and c and passed as arguments, d =5 will taken by defaults are keyword arguments."],"metadata":{"id":"vrhWole5o9uQ"}},{"cell_type":"code","source":["def func(a, b, c=8, d=5):\n","  print(a, b, c, d)"],"metadata":{"id":"Xs3otIibpBb5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["func(1, *(5, 6))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NvkbKFwprl_v","executionInfo":{"status":"ok","timestamp":1673790391377,"user_tz":-330,"elapsed":4,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"c47c980b-b4c0-4f40-cade-976ec662eb53"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 5 6 5\n"]}]},{"cell_type":"markdown","source":["## 6. what is the result of this, and explain?\n","```\n",">>> def func(a, b, c): \n","      a = 2; \n","      b[0] = 'x'; \n","      c['a'] = 'y'\n","```\n","```\n",">>> l=1; \n","    m=[1]; \n","    n={'a':0}\n","```\n","```\n",">>> func(l, m, n)\n","```\n","```\n",">>> l, m, n\n","```"],"metadata":{"id":"QLfjs6eapB2B"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Here in the code, the list and dict are passed as argument, and those are mutable. Here the list l and parameter b point to the same list in the memory location where as dict n and c point to the same memory location. Any updates to this list will update in the memory location, l = 1 , integer values, immutable, m is list, mutable, n is dict, mutable.\n","     "],"metadata":{"id":"ep-8UBufpHFl"}},{"cell_type":"code","source":["def func(a, b, c): \n","  a = 2; \n","  b[0] = 'x'; \n","  c['a'] = 'y'"],"metadata":{"id":"XhgVEFy0pJSR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["l=1; \n","m=[1]; \n","n={'a':0}"],"metadata":{"id":"72BmYHTqr3Lf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["func(l, m, n)"],"metadata":{"id":"Oja_J9IEr930"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["l, m, n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xi2fXZHqr_9I","executionInfo":{"status":"ok","timestamp":1673790498141,"user_tz":-330,"elapsed":4,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"e42ee5d5-4c04-4fa9-ce3a-d5a9ba24d846"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, ['x'], {'a': 'y'})"]},"metadata":{},"execution_count":14}]}]}