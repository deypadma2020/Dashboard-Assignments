{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOLBFQRADutu+4X7ilRcCWW"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## 1. What exactly is []?"],"metadata":{"id":"SMU6XJYDmTrq"}},{"cell_type":"markdown","source":["Ans: -\n","\n","[] is an empty list."],"metadata":{"id":"XEk6QM3-oDnn"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"kodZzcmvl4Wh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666629143676,"user_tz":-330,"elapsed":66,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"4808bceb-0644-4dbc-a79b-583a5ae0c684"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[]"]},"metadata":{},"execution_count":1}],"source":["list = []\n","\n","list"]},{"cell_type":"markdown","source":["## 2. In a list of values stored in a variable called spam, how would you assign the value &#39;hello&#39; as the third value? (Assume [2, 4, 6, 8, 10] are in spam.)\n","\n","Let&#39;s pretend the spam includes the list [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] for the next three queries."],"metadata":{"id":"B5AyzgiKmW5V"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"JXG4na_boE-M"}},{"cell_type":"code","source":["spam = [2,4,6,8,10]\n","spam[2] = 'hello'\n","spam"],"metadata":{"id":"AmyaCsxSmeVz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666629143677,"user_tz":-330,"elapsed":63,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"ad628d5f-9e1a-49d8-e112-63d889ae59e1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 4, 'hello', 8, 10]"]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["## 3. What is the value of spam[int(int(&#39;3&#39; * 2) / 11)]?"],"metadata":{"id":"qt0cVm9hme0K"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"Cmh00ofFoF8E"}},{"cell_type":"code","source":["spam =  ['a', 'b', 'c', 'd'] \n","\n","print((int('3' * 2)),'\\n')\n","print((int('3' * 2) / 11),'\\n')\n","print((int(int('3' * 2) / 11)),'\\n')\n","print(f\"The required output of given question is {spam[int(int('3' * 2) / 11)]}\")"],"metadata":{"id":"FfbhDjljmrv2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666629143678,"user_tz":-330,"elapsed":59,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"59cf05e5-1514-4d86-bb90-985e6511f5a1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["33 \n","\n","3.0 \n","\n","3 \n","\n","The required output of given question is d\n"]}]},{"cell_type":"markdown","source":["## 4. What is the value of spam[-1]?"],"metadata":{"id":"LurodkMTmsU3"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"9kb3kmVnoG58"}},{"cell_type":"code","source":["spam[-1]"],"metadata":{"id":"LtcfitbEmw3w","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1666629143680,"user_tz":-330,"elapsed":56,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"2c7984b6-a632-4946-97d2-0731f9c7ed49"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'d'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["## 5. What is the value of spam[:2]?\n"],"metadata":{"id":"lDLd5QxvmxRo"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"O_m74-TGoIJz"}},{"cell_type":"code","source":["spam[:2]"],"metadata":{"id":"I78B_dvnm20E","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666629143681,"user_tz":-330,"elapsed":53,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"cb504678-af0f-43dc-f638-08705167ae2a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['a', 'b']"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["## 6. What is the value of bacon.index(&#39;cat&#39;)?\n","\n","\n","Let&#39;s pretend bacon has the list [3.14, &#39;cat,&#39; 11, &#39;cat,&#39; True] for the next three questions."],"metadata":{"id":"s57-uDEQm3bJ"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Here, the first found index value of 'cat' will return."],"metadata":{"id":"oshFwvA_oJOH"}},{"cell_type":"code","source":["bacon = [3.14, 'cat', 11, 'cat', True]\n","bacon.index('cat')"],"metadata":{"id":"YBhjxkMdnACr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666629143682,"user_tz":-330,"elapsed":49,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"8e6a2db0-ce97-4310-8096-aa2f043bdfb0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["## 7. How does bacon.append(99) change the look of the list value in bacon?"],"metadata":{"id":"Av1mJj-onAeN"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Here, 99 appended in the last index of the list."],"metadata":{"id":"gcqIA7PVoKKu"}},{"cell_type":"code","source":["bacon.append(99)\n","bacon"],"metadata":{"id":"qpuOc_PKnFow","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666629143684,"user_tz":-330,"elapsed":47,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"4a7672e9-5f87-4940-da8b-21868271557f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[3.14, 'cat', 11, 'cat', True, 99]"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["## 8. How does bacon.remove(&#39;cat&#39;) change the look of the list in bacon?"],"metadata":{"id":"5hzRH_9VnGNb"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Here, bacon.remove('cat') function removed the first apearing 'cat'."],"metadata":{"id":"z5gRiokfoLFX"}},{"cell_type":"code","source":["bacon.remove('cat')\n","bacon"],"metadata":{"id":"lcCq2Va4nLJ3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666629143684,"user_tz":-330,"elapsed":36,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"48e5888c-bec2-47f7-efa0-8f22dd61ccd5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[3.14, 11, 'cat', True, 99]"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["## 9. What are the list concatenation and list replication operators?"],"metadata":{"id":"QNmC0jPtnLnY"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The operator for list concatenation is +, while the operator for replication is *."],"metadata":{"id":"3Axxbd01oMIv"}},{"cell_type":"code","source":["list1 = [[6, 3.7], [2,'manta',2.4],100,'tu']\n","\n","print(\"List concatenation - \",list1 + list1)\n","\n","print(\"List replication - \",list1 * 3)"],"metadata":{"id":"SOi8tIOznQKT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666629143690,"user_tz":-330,"elapsed":39,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"ff02e039-3dc1-487b-ec75-c403a15d1aca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["List concatenation -  [[6, 3.7], [2, 'manta', 2.4], 100, 'tu', [6, 3.7], [2, 'manta', 2.4], 100, 'tu']\n","List replication -  [[6, 3.7], [2, 'manta', 2.4], 100, 'tu', [6, 3.7], [2, 'manta', 2.4], 100, 'tu', [6, 3.7], [2, 'manta', 2.4], 100, 'tu']\n"]}]},{"cell_type":"markdown","source":["## 10. What is difference between the list methods append() and insert()?"],"metadata":{"id":"4up5uudBnR5b"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The only difference between append() and insert() is that insert function allows us to add a specific element at a specified index of the list unlike append() where we can add the element only at end of the list."],"metadata":{"id":"5lPpq6E9oNSP"}},{"cell_type":"code","source":["list = ['lotte choco pie','pasta','baby lips','deodorant']\n","\n","list.append(\"oreo\")\n","list"],"metadata":{"id":"SarXfNKSnW8Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666629143698,"user_tz":-330,"elapsed":44,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"73ee0e08-8c82-48a0-90e1-66c7075399d2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['lotte choco pie', 'pasta', 'baby lips', 'deodorant', 'oreo']"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["list = ['lotte choco pie','pasta','baby lips','deodorant']\n","\n","list.insert(2, 'dark fantasy')\n","list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q4Ca6zWUb45x","executionInfo":{"status":"ok","timestamp":1666629143704,"user_tz":-330,"elapsed":47,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"302ce4f2-7da5-4e7f-b58c-5185c9491f3b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['lotte choco pie', 'pasta', 'dark fantasy', 'baby lips', 'deodorant']"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["## 11. What are the two methods for removing items from a list?"],"metadata":{"id":"KsCApijenXZm"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The methods are remove(), pop().. It helps to remove the very first given element matching from the list. \n","\n","- The remove() helps to remove the very first given element matching from the list.\n","\n","- The pop() method removes an element from the list based on the index given. \n","\n","<!-- - The clear() method will remove all the elements present in the list.\n","\n","-  The del operator removes the item or an element at the specified index location from the list, but the removed item is not returned, as it is with the pop() method. -->"],"metadata":{"id":"GfVsbnecoO1d"}},{"cell_type":"code","source":["grocery = ['soyabean oil','masoor dal','spaghetti pasta','sooji','dalia', 'besan','salt','sauce','rai powder','maggi masala','vim bar','ghee']\n","\n","grocery.remove('ghee')\n","\n","print(\"item removed by remove() method - \\n\",grocery)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MYs1j6cFg6Pm","executionInfo":{"status":"ok","timestamp":1666629143706,"user_tz":-330,"elapsed":46,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"bdece1c8-2da6-481b-b1bc-f57c6cbc0f7a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["item removed by remove() method - \n"," ['soyabean oil', 'masoor dal', 'spaghetti pasta', 'sooji', 'dalia', 'besan', 'salt', 'sauce', 'rai powder', 'maggi masala', 'vim bar']\n"]}]},{"cell_type":"code","source":["grocery = ['soyabean oil','masoor dal','spaghetti pasta','sooji','dalia', 'besan','salt','sauce','rai powder','maggi masala','vim bar','ghee']\n","\n","grocery.pop(5)\n","\n","print(\"item removed by pop() method - \\n\",grocery)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BtQqbmTDh-eG","executionInfo":{"status":"ok","timestamp":1666629143709,"user_tz":-330,"elapsed":47,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"f605781b-6f05-480d-e19a-249750016fba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["item removed by pop() method - \n"," ['soyabean oil', 'masoor dal', 'spaghetti pasta', 'sooji', 'dalia', 'salt', 'sauce', 'rai powder', 'maggi masala', 'vim bar', 'ghee']\n"]}]},{"cell_type":"code","source":["# grocery = ['soyabean oil','masoor dal','spaghetti pasta','sooji','dalia', 'besan','salt','sauce','rai powder','maggi masala','vim bar','ghee']\n","\n","# del grocery[1]\n","\n","# print(\"item removed by remove() method - \\n\",grocery)"],"metadata":{"id":"QhUgF5hbiK3v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# grocery = ['soyabean oil','masoor dal','spaghetti pasta','sooji','dalia', 'besan','salt','sauce','rai powder','maggi masala','vim bar','ghee']\n","\n","# grocery.clear()\n","\n","# print(\"item removed by clear() method - \\n\",grocery)"],"metadata":{"id":"ywWoDeGwiEUx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 12. Describe how list values and string values are identical."],"metadata":{"id":"SRz0gR8uncZW"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Both strings and lists have lengths: a string's length is the number of characters in the string; a list's length is the number of items in the list. Each character in a string as well as each item in a list has a position, also called an index."],"metadata":{"id":"DdgwTm9xoPx_"}},{"cell_type":"code","source":["cosmetics = ['cosmoq shampoo','jac olivol','episoft','borolean','head & shoulder shampoo']\n","str_maa = 'Tuktuki Halder'\n","\n","print(f\"The length of the list is - {len(cosmetics)}\")\n","print(f\"The length of the string is - {len(str_maa)}\")\n","\n","print()\n","\n","print(f\"The index of the mentioned list item is - {cosmetics.index('episoft')}\")\n","print(f\"The index of the mentioned string is - {str_maa.index('u')}\")"],"metadata":{"id":"F7Uxvu9TngvJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666629144443,"user_tz":-330,"elapsed":18,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"f1d6d3bb-c94c-480f-c585-955f773b399d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The length of the list is - 5\n","The length of the string is - 14\n","\n","The index of the mentioned list item is - 2\n","The index of the mentioned string is - 1\n"]}]},{"cell_type":"markdown","source":["## 13. What&#39;s the difference between tuples and lists?"],"metadata":{"id":"4I5DZYVDnhV3"}},{"cell_type":"markdown","source":["Ans: -\n","\n","- The list is dynamic, whereas the tuple has static characteristics. This means that lists can be modified whereas tuples cannot be modified. \n","- The tuple is faster than the list because of static in nature.\n","- Lists are denoted by the square brackets but tuples are denoted as parenthesis."],"metadata":{"id":"1MLeeTgJoQuX"}},{"cell_type":"code","source":["list = [11,2016,'Manishankar',12]\n","\n","list.append('chemistry')\n","\n","list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tNYYmrBKlzbD","executionInfo":{"status":"ok","timestamp":1666629144445,"user_tz":-330,"elapsed":18,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"68cf559f-d8b3-41d6-f1f9-52c34e0736bc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[11, 2016, 'Manishankar', 12, 'chemistry']"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["tup = (11,2016,'Manishankar',12)\n","\n","tup.append('chemistry')\n","\n","tup"],"metadata":{"id":"-UjOhOyznl6e","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"error","timestamp":1666629144445,"user_tz":-330,"elapsed":15,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"a64524f2-9810-420c-80bd-84134a9ade3f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-ee08c2802071>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtup\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m11\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2016\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Manishankar'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mtup\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'chemistry'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'tuple' object has no attribute 'append'"]}]},{"cell_type":"markdown","source":["## 14. How do you type a tuple value that only contains the integer 42?"],"metadata":{"id":"W8Uq675YnmXY"}},{"cell_type":"markdown","source":["Ans: -\n","\n"," (42,) (The trailing comma is mandatory.)"],"metadata":{"id":"8_HzixR-oRqf"}},{"cell_type":"code","source":["tup = (42,)\n","\n","tup"],"metadata":{"id":"FwO6umVEnqtn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666629152203,"user_tz":-330,"elapsed":11,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"bd23d89d-e873-4a09-95cf-6d0a82ee5406"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(42,)"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["## 15. How do you get a list value&#39;s tuple form? How do you get a tuple value&#39;s list form?"],"metadata":{"id":"bpqoKG8znrHl"}},{"cell_type":"markdown","source":["Ans: -\n","\n","We can use list comprehension to create a list of tuples.\n","\n","- Method 1: Using zip() function.\n","- Method 2: Using zip() and iter() method.\n","- Method 3: using map() function.\n","- Method 4: Using list comprehension and tuple() method."],"metadata":{"id":"xp7xkwHUoSiY"}},{"cell_type":"code","source":["data = [(27, 'Bitan'), (10, 'Suman'), (30, 'Debkumar'), (13, 'Akashdeep'), (5, 'Padma')]\n","  \n","# display data\n","data"],"metadata":{"id":"Ph7U6RThnvXB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666629159288,"user_tz":-330,"elapsed":6,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"954380e0-c765-4a6f-b6f4-3255544fc108"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(27, 'Bitan'),\n"," (10, 'Suman'),\n"," (30, 'Debkumar'),\n"," (13, 'Akashdeep'),\n"," (5, 'Padma')]"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["name = ['Bitan', 'Suman', 'Debkumar', 'Akashdeep', 'Padma']\n"," \n","l = tuple(name)\n","l"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EZDgFbwLpTi7","executionInfo":{"status":"ok","timestamp":1666629163192,"user_tz":-330,"elapsed":4,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"edb6be22-feef-4291-8f05-fd661a45e8f9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('Bitan', 'Suman', 'Debkumar', 'Akashdeep', 'Padma')"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["name = ('Bitan', 'Suman', 'Debkumar', 'Akashdeep', 'Padma')\n","\n","t = list(name)\n","t"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":218},"id":"n0du1gB2xZTw","executionInfo":{"status":"error","timestamp":1666629165834,"user_tz":-330,"elapsed":6,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"b9bf1ab3-a99e-4ca6-c1db-7a25ef31e861"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-b5588b157dc0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'Bitan'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Suman'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Debkumar'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Akashdeep'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Padma'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'list' object is not callable"]}]},{"cell_type":"code","source":["name = ['Bitan', 'Suman', 'Debkumar', 'Akashdeep', 'Padma']\n","\n","data = [tuple(x) for x in name]\n","  \n","# display data\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0Pn96Fl6rOPz","executionInfo":{"status":"ok","timestamp":1666629172113,"user_tz":-330,"elapsed":515,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"3defd814-b168-4a11-cd9b-ce00fae14940"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('B', 'i', 't', 'a', 'n'),\n"," ('S', 'u', 'm', 'a', 'n'),\n"," ('D', 'e', 'b', 'k', 'u', 'm', 'a', 'r'),\n"," ('A', 'k', 'a', 's', 'h', 'd', 'e', 'e', 'p'),\n"," ('P', 'a', 'd', 'm', 'a')]"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["## 16. Variables that &quot;contain&quot; list values are not necessarily lists themselves. Instead, what do they contain?"],"metadata":{"id":"-z4dq0Tynvym"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Variables will contain references to list values rather than list values themselves. But for strings and integer values, variables simply contain the string or integer value."],"metadata":{"id":"_LVW-Oq7oTTx"}},{"cell_type":"code","source":[],"metadata":{"id":"hm1Kb5Tvn0px"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 17. How do you distinguish between copy.copy() and copy.deepcopy()?"],"metadata":{"id":"mpKoLlEQn1Sa"}},{"cell_type":"markdown","source":["Ans: -\n","\n",".copy() create reference to original object. If you change copied object - you change the original object. \n","\n",".deepcopy() creates new object and does real copying of original object to new one. Changing new deepcopied object doesn't affect original object.\n","\n","The copy.copy() function will do a shallow copy of a list,\n","\n","\n","The copy.deepcopy() function will do a deep copy of a list. only copy.deepcopy() will duplicate any lists inside the list"],"metadata":{"id":"falocck-oUZh"}},{"cell_type":"code","source":["import copy\n","\n","old_list = ['chemistry','data visualization','python']\n","new_list = copy.copy(old_list)\n","\n","new_list[1] = 'AA'\n","\n","print(\"Old list:\", old_list)\n","print(\"New list:\", new_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_jeMOuIGs3Ps","executionInfo":{"status":"ok","timestamp":1666629188858,"user_tz":-330,"elapsed":488,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"382dad7f-cfb1-45ea-b74c-93a362df2512"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Old list: ['chemistry', 'data visualization', 'python']\n","New list: ['chemistry', 'AA', 'python']\n"]}]},{"cell_type":"code","source":["import copy\n","\n","old_list = ['chemistry','data visualization','python']\n","new_list = copy.deepcopy(old_list)\n","\n","new_list[1] = 'AA'\n","\n","print(\"Old list:\", old_list)\n","print(\"New list:\", new_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hKxghzEXs_LY","executionInfo":{"status":"ok","timestamp":1666629192574,"user_tz":-330,"elapsed":5,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"9dad9ade-c4f3-4a13-f65f-c1afaa86e654"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Old list: ['chemistry', 'data visualization', 'python']\n","New list: ['chemistry', 'AA', 'python']\n"]}]}]}