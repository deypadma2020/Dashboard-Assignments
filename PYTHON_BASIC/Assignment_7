{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOgGhSsv6bCZJEIBhlRxIv4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## 1. What is the name of the feature responsible for generating Regex objects?"],"metadata":{"id":"SnyIpYj-PHnJ"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The re. compile() function returns Regex objects."],"metadata":{"id":"ox45qw8qPK7G"}},{"cell_type":"code","execution_count":27,"metadata":{"id":"E9vYEHItNRZN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666941249968,"user_tz":-330,"elapsed":553,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"fd38b304-c456-45f5-df50-c109366a05db"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["re.compile(r'string', re.UNICODE)"]},"metadata":{},"execution_count":27}],"source":["import re\n","\n","re.compile(\"string\") #The re.compile() function returns Regex objects."]},{"cell_type":"markdown","source":["## 2. Why do raw strings often appear in Regex objects?"],"metadata":{"id":"lemQeSN-POuV"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Raw strings are used so that backslashes do not have to be escaped."],"metadata":{"id":"1ouOmvaAPQA6"}},{"cell_type":"code","source":[],"metadata":{"id":"7JdzQEsvPRUn","executionInfo":{"status":"ok","timestamp":1666941252017,"user_tz":-330,"elapsed":129,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}}},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":["## 3. What is the return value of the search() method?"],"metadata":{"id":"92W-AutKPR_x"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Return Value: This function returns the index of the first match string in between regular expression and the given string object and returns -1 if no match is found. Indexing starts from zero (0) and in a first attempt, an alphabet is matched, then it does not check further. Simply, it returns the index of that first matched alphabet.\n","```\n","string.search( search value )\n","```"],"metadata":{"id":"quW9OgjoPTO8"}},{"cell_type":"markdown","source":["## 4. From a Match item, how do you get the actual strings that match the pattern?"],"metadata":{"id":"vpNqewxWPUnw"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The group() method returns strings of the matched text."],"metadata":{"id":"jcHwCZNLPXOO"}},{"cell_type":"code","source":["phoneNumRegex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d')\n","\n","mo = phoneNumRegex.search('My number is 706-331-5080.')\n","\n","#Calling matchingObject.group() will return the string.\n","print('Phone number is: ' + mo.group()) "],"metadata":{"id":"0uBse5bYPYIJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666941252018,"user_tz":-330,"elapsed":130,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"fc5c3088-4410-4939-e887-1f4c7638dbe8"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Phone number is: 706-331-5080\n"]}]},{"cell_type":"markdown","source":["## 5. In the regex which created from the r&#39;(\\d\\d\\d)-(\\d\\d\\d-\\d\\d\\d\\d)&#39;, what does group zero cover? Group 2? Group 1?"],"metadata":{"id":"7wTPNQ2nPYoO"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Group 0 is the entire match, group 1 covers the first set of parentheses, and group 2 covers the second set of parentheses."],"metadata":{"id":"5s3m-JPvPZ-t"}},{"cell_type":"code","source":["phoneNumRegex = re.compile(r'(\\d\\d\\d)-(\\d\\d\\d-\\d\\d\\d\\d)')\n","\n","mo = phoneNumRegex.search('My number is 706-331-5080.')\n","\n","print(\"The first group of number is: \",mo.group(1))\n","print(\"The second group of number is: \",mo.group(2))\n","print(\"The whole of number is: \",mo.group(0))"],"metadata":{"id":"0zIVU_eyPbTF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666941252019,"user_tz":-330,"elapsed":129,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"908e1141-eb34-494a-d56d-7feb2bb3cdd6"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["The first group of number is:  706\n","The second group of number is:  331-5080\n","The whole of number is:  706-331-5080\n"]}]},{"cell_type":"markdown","source":["## 6. In standard expression syntax, parentheses and intervals have distinct meanings. How can you tell a regex that you want it to fit real parentheses and periods?"],"metadata":{"id":"jZqBxWHuPb4a"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Periods and parentheses can be escaped with a backslash: \\., \\(, and \\)."],"metadata":{"id":"9doNWimQPddg"}},{"cell_type":"code","source":[],"metadata":{"id":"AMuP-J8wPfj3","executionInfo":{"status":"ok","timestamp":1666941252020,"user_tz":-330,"elapsed":128,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}}},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":["## 7. The findall() method returns a string list or a list of string tuples. What causes it to return one of the two options?"],"metadata":{"id":"B-hfmItBPg3a"}},{"cell_type":"markdown","source":["Ans: -\n","\n","If the regex has no groups, a list of strings is returned. If the regex has groups, a list of tuples of strings is returned."],"metadata":{"id":"aUuozASDPiOe"}},{"cell_type":"code","source":[],"metadata":{"id":"60p5TBh2Pjs_","executionInfo":{"status":"ok","timestamp":1666941252022,"user_tz":-330,"elapsed":130,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}}},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":["## 8. In standard expressions, what does the | character mean?"],"metadata":{"id":"t8t1PiqpPkNh"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Ans. The | character is called a pipe. You can use it anywhere you want to match one of many expressions. For example, the regular expression r'Cricket|Soccer Sport' will match either 'Cricket' or 'Soccer Sport'.\n","\n","When both Cricket and Soccer Sport occur in the searched string, the first occurrence of matching text will be returned as the Match object.\n","\n","The | character signifies matching \"either, or\" between two groups."],"metadata":{"id":"J7tgrLiFPmO1"}},{"cell_type":"code","source":["SportRegex = re.compile (r'Chocolate|Ice-cream')\n","s1 = SportRegex.search('Chocolate and Ice-cream')\n","s1.group()"],"metadata":{"id":"4EEBrsj4PoG2","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1666941252023,"user_tz":-330,"elapsed":131,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"5015d44d-4263-4e2b-e8ca-5d5601c525c9"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Chocolate'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["s2 = SportRegex.search('Ice-cream and Chocolate')\n","s2.group()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"6j10QGQ8GPwx","executionInfo":{"status":"ok","timestamp":1666941252024,"user_tz":-330,"elapsed":131,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"094e543b-73ea-4c4e-f355-0cc3532455b1"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Ice-cream'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":31}]},{"cell_type":"markdown","source":["## 9. In regular expressions, what does the ? character stand for?"],"metadata":{"id":"JyZXunqwPorY"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The ? character can either mean “match zero or one of the preceding group”."],"metadata":{"id":"1c36GLk9PqWh"}},{"cell_type":"code","source":["batRegex = re.compile(r'Bat(wo)?man')\n","mo1 = batRegex.search('The Adventures of Batman')\n","mo1.group()"],"metadata":{"id":"YZ8dy32IPrF8","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1666941252025,"user_tz":-330,"elapsed":131,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"c3c5303f-b00c-470e-94ae-3609aec3d937"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Batman'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["mo2 = batRegex.search('The Adventures of Batwoman')\n","mo2.group()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"Qq1yMpv5GpoA","executionInfo":{"status":"ok","timestamp":1666941252026,"user_tz":-330,"elapsed":129,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"838e1fdf-8a74-4cd7-b266-036e564eb8ce"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Batwoman'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","source":["## 10.In regular expressions, what is the difference between the + and * characters?"],"metadata":{"id":"YCDbJIH9Prp9"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Each of them are quantifiers, the star quantifier( * ) means that the preceding expression can match zero or more times it is like {0,} while the plus quantifier( + ) indicate that the preceding expression MUST match at least one time or multiple times and it is the same as {1,} .\n","\n","The + matches one or more. The * matches zero or more"],"metadata":{"id":"_wUYiU6aPs_k"}},{"cell_type":"code","source":[],"metadata":{"id":"eI4XqRaePuIs","executionInfo":{"status":"ok","timestamp":1666941252028,"user_tz":-330,"elapsed":129,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}}},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":["## 11. What is the difference between {4} and {4,5} in regular expression?"],"metadata":{"id":"5VUDKfteP23h"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The {3} matches exactly three instances of the preceding group.\n","\n","The {3,5} matches between three and five instances"],"metadata":{"id":"ToWPlfvMP4GN"}},{"cell_type":"code","source":[],"metadata":{"id":"WATzot92P4-i","executionInfo":{"status":"ok","timestamp":1666941252029,"user_tz":-330,"elapsed":129,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}}},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":["## 12. What do you mean by the \\d, \\w, and \\s shorthand character classes signify in regular expressions?"],"metadata":{"id":"6MI-a37WP5iU"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The \\d, stands for single digit, Any numeric digit from 0 to 9 \\w, stands for single word, Any letter, numeric digit, or the underscore character. (Think of this as matching “word” characters.) \\s stands for single space character, Any space, tab, or newline character. (Think of this as matching “space” characters.)"],"metadata":{"id":"SfbERmCBP97J"}},{"cell_type":"code","source":[],"metadata":{"id":"_DmvpfyiP-4L","executionInfo":{"status":"ok","timestamp":1666941252030,"user_tz":-330,"elapsed":130,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}}},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":["## 13. What do means by \\D, \\W, and \\S shorthand character classes signify in regular expressions?"],"metadata":{"id":"P4GtrqJ_P_4f"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The \\D, \\W, and \\S shorthand character classes match a single character that is not a digit, word, or space character, respectively.\n","\n","- \\D - > Any character that is not a numeric digit from 0 to 9.\n","- \\W - > Any character that is not a letter, numeric digit, or the underscore character.\n","- \\S - > Any character that is not a space, tab, or newline."],"metadata":{"id":"IeTcU6WlQBNy"}},{"cell_type":"code","source":[],"metadata":{"id":"5gKKSpafQCFd","executionInfo":{"status":"ok","timestamp":1666941252030,"user_tz":-330,"elapsed":130,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}}},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":["## 14. What is the difference between .*? and .*?"],"metadata":{"id":"NkwK-5PIQChe"}},{"cell_type":"markdown","source":["Ans: -\n","\n",". - The dot-star uses greedy mode: It will always try to match as much text as possible.\n",".? - To match any and all text in a non-greedy fashion, use the dot, star, and question mark (.*?). Like with braces, the question mark tells Python to match in a non-greedy way."],"metadata":{"id":"vltIG-62QDms"}},{"cell_type":"code","source":["greedyRegex = re.compile(r'<.*>')\n","mo = greedyRegex.search('<To serve man> for dinner.>')\n","mo.group()"],"metadata":{"id":"EWSq-mMhQFJz","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1666941252032,"user_tz":-330,"elapsed":131,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"882637df-5a94-4119-b7ca-ec844cf25c0b"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'<To serve man> for dinner.>'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["nongreedyRegex = re.compile(r'<.*?>')\n","mo = nongreedyRegex.search('<To serve man> for dinner.>')\n","mo.group()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"aKT9DG1UHgTD","executionInfo":{"status":"ok","timestamp":1666941252033,"user_tz":-330,"elapsed":132,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"188f5252-175d-414b-8212-c6dc0f02cdaa"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'<To serve man>'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["## 15. What is the syntax for matching both numbers and lowercase letters with a character class?"],"metadata":{"id":"jZ0AXHDNQGXG"}},{"cell_type":"markdown","source":["Ans: -\n","\n","Either [0-9a-z] or [a-z0-9]"],"metadata":{"id":"lBe0YCmyQHuQ"}},{"cell_type":"code","source":["reg1 = re.compile(r'[0-9a-z]')\n","reg2 = re.compile(r'[a-z0-9]')\n","\n","mo1 = reg1.search('100 times I am Reading  this for 100 th time')\n","mo1.group()"],"metadata":{"id":"79qxn6jUQIoM","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1666941252035,"user_tz":-330,"elapsed":133,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"b8a505c7-0325-40f7-e993-e21658da6187"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'1'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["reg2 = re.compile(r'[a-z0-9]')\n","\n","mo1 = reg2.search('times I am Reading  this for 100 th time')\n","mo1.group()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"xLGtl1krHwA1","executionInfo":{"status":"ok","timestamp":1666941252037,"user_tz":-330,"elapsed":134,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"cfa52d52-0d5e-4d24-f666-6dbecc776300"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'t'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","source":["## 16. What is the procedure for making a normal expression in regax case insensitive?"],"metadata":{"id":"Te7QZ1rbQJOH"}},{"cell_type":"markdown","source":["Ans: -\n","\n","But with the help of Regular Expression, we can make the Java Regular Expression case-insensitive. There are two ways to make Regular Expression case-insensitive: Using CASE_INSENSITIVE flag.\n","\n","Passing re.I or re.IGNORECASE as the second argument to re.compile() will make the matching case insensitive"],"metadata":{"id":"RW_ZIQaHQLFH"}},{"cell_type":"code","source":["casesen = re.compile(r'machine', re.I)\n","casesen.search('Machine learning is part of data science').group()"],"metadata":{"id":"v92uaVBeQKbG","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1666941252038,"user_tz":-330,"elapsed":134,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"b32240fc-ea0f-485d-cfa2-d09f53e1523f"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Machine'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["casesen.search('MACHINE is learning.').group()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"SiugLdDGIBSZ","executionInfo":{"status":"ok","timestamp":1666941252039,"user_tz":-330,"elapsed":134,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"031a6817-2906-4cc1-ba02-ce8873cbeabd"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'MACHINE'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":39}]},{"cell_type":"markdown","source":["## 17. What does the . character normally match? What does it match if re.DOTALL is passed as 2nd argument in re.compile()?"],"metadata":{"id":"PSMT1LUyQMmX"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The . character normally matches any character except the newline character. If re.DOTALL is passed as the second argument to re.compile(), then the dot will also match newline characters."],"metadata":{"id":"ecoY10kAQN4Z"}},{"cell_type":"code","source":[],"metadata":{"id":"s3v3pWv2QOvu","executionInfo":{"status":"ok","timestamp":1666941252041,"user_tz":-330,"elapsed":135,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}}},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":["## 18. If numReg = re.compile(r&#39;\\d+&#39;), what will numRegex.sub(&#39;X&#39;, &#39;11 drummers, 10 pipers, five rings, 4 hen&#39;) return?"],"metadata":{"id":"Q9dECeOAQPOH"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"r-hFTPnfQQVB"}},{"cell_type":"code","source":["numRegex = re.compile(r'\\d+')\n","mo = numRegex.sub('X', '11 drummers, 10 pipers, five rings, 4 hen')\n","mo"],"metadata":{"id":"qitInXHzQRQv","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1666941252042,"user_tz":-330,"elapsed":136,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"4b4472a8-5b6b-47de-8e91-505b99660931"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'X drummers, X pipers, five rings, X hen'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":40}]},{"cell_type":"markdown","source":["## 19. What does passing re.VERBOSE as the 2nd argument to re.compile() allow to do?"],"metadata":{"id":"bJtSfYQAQT8b"}},{"cell_type":"markdown","source":["Ans: -\n","\n","The re. VERBOSE argument allows you to add whitespace and comments to the string passed to re. compile()."],"metadata":{"id":"IpZTu455QVJE"}},{"cell_type":"code","source":[],"metadata":{"id":"k-FkhH7BQWA4","executionInfo":{"status":"ok","timestamp":1666941252047,"user_tz":-330,"elapsed":140,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}}},"execution_count":40,"outputs":[]},{"cell_type":"markdown","source":["## 20. How would you write a regex that match a number with comma for every three digits? It must match the given following:\n","- &#39;42&#39;\n","- &#39;1,234&#39;\n","- &#39;6,368,745&#39;\n","\n","but not the following:\n","- &#39;12,34,567&#39; (which has only two digits between the commas)\n","- &#39;1234&#39; (which lacks commas)"],"metadata":{"id":"W450veT2QWpQ"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"yeJaze6QQYFd"}},{"cell_type":"code","source":["reg1 = re.compile(r'^\\d{1,3}(,\\d{3})*$')\n","mo1 = reg1.search('42')\n","mo1.group()"],"metadata":{"id":"Uc7NmpReQa0P","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1666941252048,"user_tz":-330,"elapsed":141,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"b89bf8a0-b904-45a0-e506-3cc7ef414377"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'42'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["reg1 = re.compile(r'^\\d{1,3}(,\\d{3})*$')\n","mo1 = reg1.search('1,234')\n","mo1.group()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"2bJeWN9LIpte","executionInfo":{"status":"ok","timestamp":1666941252052,"user_tz":-330,"elapsed":145,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"4dd1f0bb-b4ec-4599-dd7d-d1f98d81b9bf"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'1,234'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["reg1 = re.compile(r'^\\d{1,3}(,\\d{3})*$')\n","mo1 = reg1.search('6,368,745')\n","mo1.group()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"QyeMCWwXItfb","executionInfo":{"status":"ok","timestamp":1666941252055,"user_tz":-330,"elapsed":147,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"064ddfff-c70d-4309-eaa1-05a70575cfd3"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'6,368,745'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":43}]},{"cell_type":"markdown","source":["## 21. How would you write a regex that matches the full name of someone whose last name is Watanabe? You can assume that the first name that comes before it will always be one word that begins with a capital letter. The regex must match the following:\n","- &#39;Haruto Watanabe&#39;\n","- &#39;Alice Watanabe&#39;\n","- &#39;RoboCop Watanabe&#39;\n","but not the following:\n","- &#39;haruto Watanabe&#39; (where the first name is not capitalized)\n","- &#39;Mr. Watanabe&#39; (where the preceding word has a nonletter character)\n","- &#39;Watanabe&#39; (which has no first name)\n","- &#39;Haruto watanabe&#39; (where Watanabe is not capitalized)"],"metadata":{"id":"i_zhSVPXQbXk"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"7vWlKLbSQdbY"}},{"cell_type":"code","source":["name = re.compile(r'[A-Z][a-z]*\\sWatanabe')\n","reg1 = re.compile(r'^\\d{1,3}(,\\d{haruto Watanabe3})*$')\n","mo1 = name.search('Haruto Watanabe')\n","mo1.group()"],"metadata":{"id":"sCYaxp8xQeT0","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1666941252056,"user_tz":-330,"elapsed":147,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"68c97a38-7444-4b75-868b-702b7ed35d20"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Haruto Watanabe'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["name = re.compile(r'[A-Z][a-z]*\\sWatanabe')\n","reg1 = re.compile(r'^\\d{1,3}(,\\d{3})*$')\n","mo1 = name.search('Alice Watanabe')\n","mo1.group()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"_GBr6-ugI6cw","executionInfo":{"status":"ok","timestamp":1666941252057,"user_tz":-330,"elapsed":148,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"66bc2329-1318-49f2-d10a-ddd98d95a1d8"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Alice Watanabe'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["name = re.compile(r'[A-Z][a-z]*\\sWatanabe')\n","reg1 = re.compile(r'^\\d{1,3}(,\\d{3})*$')\n","mo1 = name.search('Robocop Watanabe')\n","mo1.group()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"-XJRUeTrI-HX","executionInfo":{"status":"ok","timestamp":1666941252059,"user_tz":-330,"elapsed":148,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"9ce3f966-4138-4cd9-b4cd-62c2ede1277a"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Robocop Watanabe'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":46}]},{"cell_type":"markdown","source":["## 22. How would you write a regex that matches a sentence where the first word is either Alice, Bob, or Carol; the second word is either eats, pets, or throws; the third word is apples, cats, or baseballs; and the sentence ends with a period? This regex should be case-insensitive. It must match the following:\n","- &#39;Alice eats apples.&#39;\n","- &#39;Bob pets cats.&#39;\n","- &#39;Carol throws baseballs.&#39;\n","- &#39;Alice throws Apples.&#39;\n","- &#39;BOB EATS CATS.&#39;\n","but not the following:\n","- &#39;RoboCop eats apples.&#39;\n","- &#39;ALICE THROWS FOOTBALLS.&#39;\n","- &#39;Carol eats 7 cats.&#39;"],"metadata":{"id":"gszvur_DQeyK"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"cF87OeQQQgLk"}},{"cell_type":"code","source":["name = re.compile(r'(Alice|Bob|Carol)\\s(eats|pets|throws)\\s(apples|cats|baseballs)\\.', re.IGNORECASE)\n","\n","mo1 = name.search('Alice eats apples.')\n","mo1.group()"],"metadata":{"id":"fr9z3cO9QhgT","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1666941252063,"user_tz":-330,"elapsed":151,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"9f103568-e4dd-46fa-b3a9-958dbf9b84ce"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Alice eats apples.'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["name = re.compile(r'(Alice|Bob|Carol)\\s(eats|pets|throws)\\s(apples|cats|baseballs)\\.', re.IGNORECASE)\n","\n","mo1 = name.search('Carol throws baseballs.')\n","mo1.group()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"mkZIMZJCJF5F","executionInfo":{"status":"ok","timestamp":1666941252064,"user_tz":-330,"elapsed":151,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"a472bd25-2058-454a-c745-3fdff8f84335"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Carol throws baseballs.'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":48}]}]}