{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNof35S847Z8Gk58WvHnIlv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## 1. Write a Python program to Extract Unique values dictionary values?"],"metadata":{"id":"bxxsNbrsFr46"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"t1IXw6eiFr1U"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O4zCmtBwFnfA","executionInfo":{"status":"ok","timestamp":1673847889851,"user_tz":-330,"elapsed":11,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"6676b23d-927e-4c54-b231-567d6ca7d59b"},"outputs":[{"output_type":"stream","name":"stdout","text":["unique values are: {64, 1, 66, 3, 0, 4, 7, 8, 45, 47, 17, 81, 21}\n"]}],"source":["dict1 = {'a' : [3, 64, 17, 66],\n","             'b' : [1, 21, 47, 45],\n","             'c' : [0, 17, 7, 81],\n","             'd' : [3, 3, 4,8]}\n","\n","un_val = set([ele for val in dict1.values() for ele in val])\n","print(\"unique values are: {}\".format(un_val))"]},{"cell_type":"markdown","source":["## 2. Write a Python program to find the sum of all items in a dictionary?"],"metadata":{"id":"2Miyh24hF0M2"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"zJ8lvMy3F5z5"}},{"cell_type":"code","source":["dict2 = {'a' : 22,\n","             'b' :  21,\n","             'c' : 52,\n","             'd' : 56}\n","\n","sum = 0\n","for i in dict2.values():\n","    sum +=sum + i\n","print(\"Sun of all items: {}\".format(sum))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3_uHh1Z4F70-","executionInfo":{"status":"ok","timestamp":1673847889851,"user_tz":-330,"elapsed":8,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"3c2b1671-de06-41dc-bc09-82c87b97f586"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Sun of all items: 420\n"]}]},{"cell_type":"markdown","source":["## 3. Write a Python program to Merging two Dictionaries?"],"metadata":{"id":"V7WVil_CF8Re"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"7bJGE58xGEh6"}},{"cell_type":"code","source":["one = { 'x': 2, 'y': 3}\n","two = { 'y': 5, 'z': 6}\n","both = one.copy()\n","both.update(two)\n","print(\"dict a : \", one)\n","print(\"Dict b : \", two)\n","print('updated dictionary : {}'.format(both))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mcJtXv0BGGmM","executionInfo":{"status":"ok","timestamp":1673847907570,"user_tz":-330,"elapsed":28,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"4d079059-6d01-4400-fec6-6925704806dd"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["dict a :  {'x': 2, 'y': 3}\n","Dict b :  {'y': 5, 'z': 6}\n","updated dictionary : {'x': 2, 'y': 5, 'z': 6}\n"]}]},{"cell_type":"markdown","source":["## 4. Write a Python program to convert key-values list to flat dictionary?"],"metadata":{"id":"t0SDjNoXGHGy"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"2DdUC66FGLxI"}},{"cell_type":"code","source":["test_dict = {'month' : [1, 2, 3],\n","             'name' : ['Jan', 'Feb', 'March']}\n","  \n","# printing original dictionary\n","print(\"The original dictionary is : \" + str(test_dict))\n","  \n","# Convert key-values list to flat dictionary\n","# Using dict() + zip()\n","res = dict(zip(test_dict['month'], test_dict['name']))\n","  \n","# printing result \n","print(\"Flattened dictionary : \" + str(res))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MHoLjQ6fGQOa","executionInfo":{"status":"ok","timestamp":1673847924014,"user_tz":-330,"elapsed":16,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"5ef85e91-a240-45ee-eb00-21e647f8d400"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["The original dictionary is : {'month': [1, 2, 3], 'name': ['Jan', 'Feb', 'March']}\n","Flattened dictionary : {1: 'Jan', 2: 'Feb', 3: 'March'}\n"]}]},{"cell_type":"markdown","source":["## 5. Write a Python program to insertion at the beginning in OrderedDict?"],"metadata":{"id":"_GvG5Nv0GQuh"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"_diIYclgGVai"}},{"cell_type":"code","source":["# insertion of items in beginning of ordered dict\n","from collections import OrderedDict\n","  \n","# initialising ordered_dict\n","iniordered_dict = OrderedDict([('Feb', '2'), ('Mar', '3')])\n","  \n","# inserting items in starting of dict \n","iniordered_dict.update({'Jan':'1'})\n","iniordered_dict.move_to_end('Jan', last = False)\n","  \n","# print result\n","print (\"Ordered Dictionary  : \"+str(iniordered_dict))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pbFfyCJSGXZj","executionInfo":{"status":"ok","timestamp":1673847942441,"user_tz":-330,"elapsed":3,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"f63069fa-70c6-4060-cb3e-33f78b8802df"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Ordered Dictionary  : OrderedDict([('Jan', '1'), ('Feb', '2'), ('Mar', '3')])\n"]}]},{"cell_type":"markdown","source":["## 6. Write a Python program to check order of character in string using OrderedDict()?"],"metadata":{"id":"Tm5X4IHhGX4_"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"mQggYJQTGeIS"}},{"cell_type":"code","source":["from collections import OrderedDict \n","  \n","def checkOrderofString(str, pattern): \n","      \n","    # create empty OrderedDict \n","    dict = OrderedDict.fromkeys(str) \n","    print(dict)   \n","    ptrlen = 0\n","    for key,value in dict.items(): \n","        \n","        if (key == pattern[ptrlen]): \n","            ptrlen = ptrlen + 1\n","          \n","        # check if we have traverse complete pattern string \n","        if (ptrlen == (len(pattern))):            \n","            return 'true'\n","  \n","    # if we come out from for loop that means order was mismatched \n","    return 'false'\n","  \n","\n","string = input(\"enter string : \")\n","pattern = input(\"Enter Pattern : \")\n","if checkOrderofString(string,pattern):\n","    print(\"Pattern matched\")\n","else:\n","    print(\"Pattern not matched\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZIYs6k6uGgCO","executionInfo":{"status":"ok","timestamp":1673848002723,"user_tz":-330,"elapsed":36157,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"f0d57bcc-e637-4091-ed16-7ce4dd97c107"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["enter string : Python\n","Enter Pattern : on\n","OrderedDict([('P', None), ('y', None), ('t', None), ('h', None), ('o', None), ('n', None)])\n","Pattern matched\n"]}]},{"cell_type":"markdown","source":["## 7. Write a Python program to sort Python Dictionaries by Key or Value?"],"metadata":{"id":"hqpavxN5GgeB"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"n21Fw6onGl1d"}},{"cell_type":"code","source":["dict= {4:5 ,7:8 ,4:3 ,6:9 ,9:5 ,4:2 }\n","#Print sorted list of keys\n","print(sorted(dict.keys()))\n","#Print sorted list of items\n","print(sorted(dict.items()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f5WdoTboGnjr","executionInfo":{"status":"ok","timestamp":1673848011732,"user_tz":-330,"elapsed":8,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"2068bd43-5f93-4c72-de95-35739f7a5a7d"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[4, 6, 7, 9]\n","[(4, 2), (6, 9), (7, 8), (9, 5)]\n"]}]},{"cell_type":"code","source":["dic2 = {4:5 ,7:8 ,4:3 ,6:9 ,9:5 ,4:2 }\n","print(sorted(dic2.values()))\n","#Print sorted list of values"],"metadata":{"id":"qSJSlyi1HbOi","executionInfo":{"status":"ok","timestamp":1673848026731,"user_tz":-330,"elapsed":816,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"5e2ea0a2-ace9-45fe-c149-264cab1e1f53","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 5, 8, 9]\n"]}]}]}