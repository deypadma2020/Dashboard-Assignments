{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPFJyaTlwXOH3XB/cQkQlws"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Question1\n","Create a function that takes a string and returns a string in which each character is repeated\n","once.\n","- Examples:\n","\n","  double_char(\"String\") ➞ \"SSttrriinngg\"\n","\n","  double_char(\"Hello World!\") ➞ \"HHeelllloo WWoorrlldd!!\"\n","\n","  double_char(\"1234!_ \") ➞ \"11223344!!__ \""],"metadata":{"id":"02zCmXaqwm7X"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"iYl3yx6Bwm3-"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qCoziZcRwhUd","executionInfo":{"status":"ok","timestamp":1673859408976,"user_tz":-330,"elapsed":16,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"22e56e0e-f857-4c7b-c21a-03e4449fc003"},"outputs":[{"output_type":"stream","name":"stdout","text":["SSttrriinngg\n"]}],"source":["def double_char(str):\n","    return ''.join([c+c for c in str])\n","print(double_char(\"String\"))"]},{"cell_type":"markdown","source":["## Question2\n","Create a function that reverses a boolean value and returns the string \"boolean expected\" if another variable type is given.\n","- Examples\n","\n","  reverse(True) ➞ False\n","\n","  reverse(False) ➞ True\n","\n","  reverse(0) ➞ \"boolean expected\"\n","\n","  reverse(None) ➞ \"boolean expected\""],"metadata":{"id":"FuS5vMUpw_UE"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"Up0VFlZgxWeh"}},{"cell_type":"code","source":["def reverse(arg=None):\n","    return not arg if type(arg) == bool else \"boolean expected\"\n","\n","print(reverse(True)) # False\n","print(reverse(False)) # True\n","print(reverse(0)) # \"boolean expected\"\n","print(reverse(None)) # \"boolean expected\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"78hAi5WpxZca","executionInfo":{"status":"ok","timestamp":1673859423291,"user_tz":-330,"elapsed":6,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"847d8c83-38fe-4c08-8e9c-7111463256ad"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n","True\n","boolean expected\n","boolean expected\n"]}]},{"cell_type":"markdown","source":["## Question3\n","Create a function that returns the thickness (in meters) of a piece of paper after folding it n number of times. The paper starts off with a thickness of 0.5mm.\n","- Examples:\n","```\n","num_layers(1) ➞ \"0.001m\"\n","# Paper folded once is 1mm (equal to 0.001m)\n","```\n","```\n","num_layers(4) ➞ \"0.008m\"\n","# Paper folded 4 times is 8mm (equal to 0.008m)\n","```\n","```\n","num_layers(21) ➞ \"1048.576m\"\n","# Paper folded 21 times is 1048576mm (equal to 1048.576m)\n","```"],"metadata":{"id":"g7KhVCL4xZ9i"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"v8Rx9nxyx7D5"}},{"cell_type":"code","source":["def num_layers(n):\n","    thickness = 0.5\n","    for _ in range(n):\n","        thickness *= 2\n","    \n","    return str(thickness / 1000)+'m' # for meters\n","\n","print(num_layers(1))\n","print(num_layers(4))\n","print(num_layers(21))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZWFW_V1Dx9V7","executionInfo":{"status":"ok","timestamp":1673859439861,"user_tz":-330,"elapsed":8,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"d48531fb-9f5c-43e6-b34e-f952b28847cc"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["0.001m\n","0.008m\n","1048.576m\n"]}]},{"cell_type":"markdown","source":["## Question4\n","\n","Create a function that takes a single string as argument and returns an ordered list containing the indices of all capital letters in the string.\n","- Examples:\n","\n","  index_of_caps(\"eDaBiT\") ➞ [1, 3, 5]\n","\n","  index_of_caps(\"eQuINoX\") ➞ [1, 3, 4, 6]\n","\n","  index_of_caps(\"determine\") ➞ []\n","\n","  index_of_caps(\"STRIKE\") ➞ [0, 1, 2, 3, 4, 5]\n","\n","  index_of_caps(\"sUn\") ➞ [1]"],"metadata":{"id":"44Wr4Unzx9ud"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"iN3a7dZSySwY"}},{"cell_type":"code","source":["def index_of_caps(word):\n","    indices = []\n","    for i in range(len(word)):\n","        if word[i].isupper():\n","             indices.append(i)\n","    return indices\n","\n","\n","print(index_of_caps('eDaBiT'))\n","print(index_of_caps('eQuINoX')) \n","print(index_of_caps('determine'))\n","print(index_of_caps('STRIKE'))\n","print(index_of_caps('sUn'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p-ihdPmhyVNA","executionInfo":{"status":"ok","timestamp":1673859457521,"user_tz":-330,"elapsed":439,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"96c6e460-72c3-46c5-d35c-1718740969a7"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 3, 5]\n","[1, 3, 4, 6]\n","[]\n","[0, 1, 2, 3, 4, 5]\n","[1]\n"]}]},{"cell_type":"markdown","source":["## Question5\n","Using list comprehensions, create a function that finds all even numbers from 1 to the given number.\n","- Examples:\n","\n","find_even_nums(8) ➞ [2, 4, 6, 8]\n","\n","find_even_nums(4) ➞ [2, 4]\n","\n","find_even_nums(2) ➞ [2]"],"metadata":{"id":"ryUP5Tx8yVnU"}},{"cell_type":"markdown","source":["Ans: -\n","\n"],"metadata":{"id":"jmmsRv0jylWx"}},{"cell_type":"code","source":["def find_even_nums(n):\n","    even =[x for x in range(2,n+1) if x % 2 == 0]\n","    return even\n","\n","n = int(input('Enter a number : '))\n","find_even_nums(n)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gdZ_xpFzyo5a","executionInfo":{"status":"ok","timestamp":1673859480566,"user_tz":-330,"elapsed":5434,"user":{"displayName":"Padma Dey","userId":"04161716402767628731"}},"outputId":"70d91d03-c29e-4c87-b724-6c512df0aeed"},"execution_count":5,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter a number : 8\n"]},{"output_type":"execute_result","data":{"text/plain":["[2, 4, 6, 8]"]},"metadata":{},"execution_count":5}]}]}